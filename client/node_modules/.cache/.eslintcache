[{"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/index.js":"1","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/App.js":"2","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/reportWebVitals.js":"3","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/AudioPlayer/tracks.js":"4","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/Analysers/AudioAnalyser.js":"5","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/AudioPlayer/AudioPlayer.jsx":"6","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/AudioPlayer/AudioControls.jsx":"7","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/Visualisers/FrequencyVisualiser.js":"8","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/Visualisers/WaveformVisualiser.js":"9","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/containers/MediaPlayer.jsx":"10","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/TrackForm/UploadForm.jsx":"11","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/services/TrackService.js":"12"},{"size":500,"mtime":1624800491770,"results":"13","hashOfConfig":"14"},{"size":917,"mtime":1625487362855,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1624800491772,"results":"16","hashOfConfig":"14"},{"size":708,"mtime":1625240271247,"results":"17","hashOfConfig":"14"},{"size":3274,"mtime":1625487451029,"results":"18","hashOfConfig":"14"},{"size":5196,"mtime":1625487815089,"results":"19","hashOfConfig":"14"},{"size":1912,"mtime":1625240131027,"results":"20","hashOfConfig":"14"},{"size":1955,"mtime":1625488543148,"results":"21","hashOfConfig":"14"},{"size":2353,"mtime":1625488975092,"results":"22","hashOfConfig":"14"},{"size":2547,"mtime":1625487832164,"results":"23","hashOfConfig":"14"},{"size":1365,"mtime":1625500937397,"results":"24","hashOfConfig":"14"},{"size":403,"mtime":1625487333173,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"kxb1hw",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/index.js",[],["54","55"],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/App.js",[],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/reportWebVitals.js",[],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/AudioPlayer/tracks.js",[],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/Analysers/AudioAnalyser.js",["56"],"import React, {useEffect, useState, useRef} from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport FrequencyVisualiser from '../Visualisers/FrequencyVisualiser';\n\nconst AudioAnalyser = ({ mode, input, visualiserType, background }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0));\n    \n    // creates an audio context and stores it in ref    \n    const audioContextRef = useRef(new (window.AudioContext || window.webkitAudioContext)());\n    // sets audioContext to be the current ref of audioContext \n    const audioContext = audioContextRef.current;\n    \n    const sourceRef = useRef(null);\n    let source = sourceRef.current;\n    const analyserRef = useRef(audioContext.createAnalyser())\n    const analyser = analyserRef.current;\n    const [analyserDisconnected, setAnalyserDisconnected] = useState(false)\n    \n\n\n    useEffect( () => {\n        console.log('analyser input', input)\n        // empty request animation frame Id\n        let rafId; \n         \n        // Creates a data Array which is half the length of the fftSize;\n        // it takes in unsigned integers  \n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // connects the audio stream to the analyser node using the relevant method depending on input\n        if(mode === \"track\"){\n                    source = audioContext.createMediaElementSource(input);\n                    source.connect(analyser).connect(audioContext.destination);\n                } else {\n                    source = audioContext.createMediaStreamSource(input);\n                    source.connect(analyser);\n                }\n        \n        \n        const tick = () => {\n            // copies wave form data into the dataArray which is passed in as an argument   \n            analyser.getByteTimeDomainData(dataArray)\n            // sets audioData to be the value of a copy of dataArray\n            setAudioData([...dataArray])\n            // requests a re-render while calling tick in a recursive loop\n            rafId = requestAnimationFrame(tick);\n        }\n    \n        rafId = requestAnimationFrame(tick);\n\n        return function cleanup() {\n            console.log(\"disconnect analyser\")\n            if(mode === \"track\"){\n                console.log(\"mode is track\")\n                source.disconnect(analyser);\n                setAnalyserDisconnected(true)\n            } else {\n                console.log(\"mode is not track\")\n                source.disconnect()\n            }\n            cancelAnimationFrame(rafId);\n            console.log('clean up on aisle 3')   \n        }\n\n    }, [mode, input])\n\n    return(\n        <div>\n            {visualiserType === \"Waveform\" ? \n            <WaveformVisualiser \n                audioData={audioData} \n                analyserDisconnected={analyserDisconnected} \n                setAnalyserDisconnected={setAnalyserDisconnected}\n                background={background}\n            /> :\n            <FrequencyVisualiser \n                audioData={audioData} \n                analyser={analyser}\n                setAnalyserDisconnected={setAnalyserDisconnected}\n                background={background}\n            /> \n            }\n        </div>\n        \n    )\n\n}\n\nexport default AudioAnalyser;","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/AudioPlayer/AudioPlayer.jsx",[],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/AudioPlayer/AudioControls.jsx",[],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/Visualisers/FrequencyVisualiser.js",["57"],"import React, { useRef, useEffect } from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({ audioData, analyser, background }) => {\n\n    const canvasRef = useRef();\n\n    useEffect(() => {\n\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n        let randomColour = \"#\" + ((1 << 24) * Math.random() | 0).toString(16)\n\n        // a quarter of the fft size default\n        analyser.fftSize = 256;\n        console.log(analyser)\n        //bufferLength equals half the fftSize i.e. 128\n        let bufferLength = analyser.frequencyBinCount;\n        console.log(\"buffer length\", bufferLength);\n        // let dataArray = new Uint8Array(bufferLength);\n\n        context.clearRect(0, 0, width, height);\n\n        const render = () => {\n            if(background === \"Clear\"){\n                context.fillStyle = '#00aeb0';   \n            } else {\n                context.fillStyle = '#000000'\n            }\n            \n            context.fillRect(0, 0, width, height);\n\n            let barWidth = (width / bufferLength) * 2.5;\n            let barHeight;\n            let x = 0;\n\n            for (var i = 0; i < bufferLength; i++) {\n                // the height of a bar equals the current audio sample value halved\n                barHeight = audioData[i] / 0.3;\n                \n                context.fillStyle = randomColour;\n                context.fillRect(x, height - barHeight / 2, barWidth, barHeight)\n\n                x += barWidth + 1;\n            }\n        };\n\n        render()\n\n    }, [audioData]);\n\n    return (\n        <canvas\n            className=\"frequency-canvas\"\n            width=\"550\"\n            height=\"550\"\n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default FrequencyVisualiser;","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/Visualisers/WaveformVisualiser.js",["58"],"import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst WaveformVisualiser = ({\n    audioData, \n    setAnalyserDisconnected, \n    analyserDisconnected,\n    background\n}) => {\n\n    const canvasRef = useRef();\n    \n    //clear the canvas every 30 seconds\n    // useEffect(() => {\n        \n    //     const clearCanvas = () => {\n    //         context.clearRect(0, 0, width, height);\n    //     }\n    //     setInterval(clearCanvas, 30000)\n\n    // },[])\n\n    useEffect(() => {\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n        let x = 0;\n        let sliceWidth = width / audioData.length;\n        let randomColour = \"#\" + ((1<<24)*Math.random() | 0).toString(16)\n        if(background === \"Black\"){\n            context.fillRect(0, 0,width, height)\n        } else {\n            context.fillStyle = '#000000'\n        }\n        \n        // if the analyser has been disconnected clear the canvas and reset analyserDisconnected to false\n        if(analyserDisconnected){\n            context.clearRect(0, 0, width, height);\n            setAnalyserDisconnected(false)\n        }\n        \n\n        const renderWaveform = () => {\n            \n            if(background === \"Black\"){\n                context.fillRect(0, 0,width, height)\n            } else {\n                context.fillStyle = '#000000'\n            }\n            \n            context.lineWidth = 2;\n            context.strokeStyle = randomColour;\n            \n            context.beginPath();\n            context.moveTo(0, height / 2);\n\n            for(const item of audioData) {\n                const y = (item / 255.0) * height;\n                context.lineTo(x, y);\n                x += sliceWidth;\n            }\n            // console.log(\"Audio-data:\", audioData)\n            context.lineTo(x, height / 2);\n            context.stroke();\n            \n        }\n        \n        renderWaveform()\n        \n\n    }, [audioData, background])\n\n    return(\n        <canvas \n            className=\"canvas\"\n            width=\"550\" \n            height=\"550\" \n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default WaveformVisualiser;","/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/containers/MediaPlayer.jsx",[],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/components/TrackForm/UploadForm.jsx",["59","60","61"],"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/services/TrackService.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":32,"column":30,"nodeType":"68","endLine":32,"endColumn":74},{"ruleId":"66","severity":1,"message":"69","line":54,"column":8,"nodeType":"70","endLine":54,"endColumn":19,"suggestions":"71"},{"ruleId":"66","severity":1,"message":"72","line":74,"column":8,"nodeType":"70","endLine":74,"endColumn":31,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":7,"nodeType":"76","messageId":"77","endLine":2,"endColumn":12},{"ruleId":"74","severity":1,"message":"78","line":8,"column":12,"nodeType":"76","messageId":"77","endLine":8,"endColumn":24},{"ruleId":"74","severity":1,"message":"79","line":8,"column":26,"nodeType":"76","messageId":"77","endLine":8,"endColumn":41},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"react-hooks/exhaustive-deps","Assignments to the 'source' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has missing dependencies: 'analyser' and 'background'. Either include them or remove the dependency array.","ArrayExpression",["82"],"React Hook useEffect has missing dependencies: 'analyserDisconnected' and 'setAnalyserDisconnected'. Either include them or remove the dependency array. If 'setAnalyserDisconnected' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["83"],"no-unused-vars","'axios' is assigned a value but never used.","Identifier","unusedVar","'uploadedFile' is assigned a value but never used.","'setUploadedFile' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [analyser, audioData, background]",{"range":"88","text":"89"},"Update the dependencies array to be: [analyserDisconnected, audioData, background, setAnalyserDisconnected]",{"range":"90","text":"91"},[1737,1748],"[analyser, audioData, background]",[2133,2156],"[analyserDisconnected, audioData, background, setAnalyserDisconnected]"]