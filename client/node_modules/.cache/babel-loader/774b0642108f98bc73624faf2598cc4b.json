{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  source,\n  audioContext\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array());\n  const [dataArray, setAudioDataArray] = useState();\n  let analyser = audioContext.createAnalyser();\n  useEffect(() => {\n    setAudioDataArray(new Uint8Array(analyser.frequencyBinCount));\n    console.log(\"dataArray:\", dataArray);\n    source.connect(analyser);\n    let rafId = requestAnimationFrame(tick);\n  }, []);\n\n  let tick = () => {\n    analyser.getByteTimeDomainData(dataArray);\n    console.log(dataArray);\n    setAudioData(dataArray);\n    let rafId = requestAnimationFrame(tick);\n  }; // function componentWillUnmount() {\n  //     cancelAnimationFrame(rafId);\n  //     analyser.disconnect();\n  //     source.disconnect();\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"NxOtshlH7ePXUa/mzUya44/4L9c=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","source","audioContext","audioData","setAudioData","Uint8Array","dataArray","setAudioDataArray","analyser","createAnalyser","frequencyBinCount","console","log","connect","rafId","requestAnimationFrame","tick","getByteTimeDomainData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA8B;AAAA;;AAEhD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAIO,UAAJ,EAAD,CAA1C;AACA,QAAM,CAACC,SAAD,EAAYC,iBAAZ,IAAiCT,QAAQ,EAA/C;AAEA,MAAIU,QAAQ,GAAGN,YAAY,CAACO,cAAb,EAAf;AAEAZ,EAAAA,SAAS,CAAE,MAAM;AACbU,IAAAA,iBAAiB,CAAC,IAAIF,UAAJ,CAAeG,QAAQ,CAACE,iBAAxB,CAAD,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,SAA1B;AACAL,IAAAA,MAAM,CAACY,OAAP,CAAeL,QAAf;AACA,QAAIM,KAAK,GAAGC,qBAAqB,CAACC,IAAD,CAAjC;AACH,GALQ,EAKN,EALM,CAAT;;AAQA,MAAIA,IAAI,GAAG,MAAM;AACbR,IAAAA,QAAQ,CAACS,qBAAT,CAA+BX,SAA/B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AACAF,IAAAA,YAAY,CAACE,SAAD,CAAZ;AACA,QAAIQ,KAAK,GAAGC,qBAAqB,CAACC,IAAD,CAAjC;AACH,GALD,CAfgD,CAuBhD;AACA;AACA;AACA;AACA;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEb;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAjCD;;GAAMH,a;;KAAAA,a;AAmCN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ source, audioContext }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array());\n    const [dataArray, setAudioDataArray] = useState()\n    \n    let analyser = audioContext.createAnalyser();\n    \n    useEffect( () => {\n        setAudioDataArray(new Uint8Array(analyser.frequencyBinCount)) ;\n        console.log(\"dataArray:\", dataArray)\n        source.connect(analyser);\n        let rafId = requestAnimationFrame(tick);\n    }, [])\n\n    \n    let tick = () => {   \n        analyser.getByteTimeDomainData(dataArray);\n        console.log(dataArray)\n        setAudioData(dataArray)\n        let rafId = requestAnimationFrame(tick);\n    }\n\n\n    // function componentWillUnmount() {\n    //     cancelAnimationFrame(rafId);\n    //     analyser.disconnect();\n    //     source.disconnect();\n    // }\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}