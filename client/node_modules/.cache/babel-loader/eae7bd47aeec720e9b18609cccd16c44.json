{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioPlayer/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport AudioControls from './AudioControls.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = ({\n  tracks,\n  toggleTrack\n}) => {\n  _s();\n\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const {\n    title,\n    audioSrc\n  } = tracks[trackIndex];\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n\n  const toPrevTrack = () => {\n    // if trackIndex minus 1 is less than zero, set track index to the last track\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(tracks.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    // if trackIndex is less than tracks length go to next track, otherwise go to first track\n    if (trackIndex < tracks.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    // when isPlaying state changes, call play() or stop() according to isPlaying value\n    if (isPlaying) {\n      audioRef.current.play();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  const handlePlay = event => {\n    const eventTarget = event.target;\n    console.log(\"eventTarget\", event);\n    toggleTrack(eventTarget);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPlaying: isPlaying,\n        onPrevClick: toPrevTrack,\n        onNextClick: toNextTrack,\n        onPlayPauseClick: setIsPlaying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioPlayer, \"R6uwZCe8kIExIUaa47ixKr2w4ac=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioPlayer/AudioPlayer.jsx"],"names":["React","useState","useEffect","useRef","AudioControls","AudioPlayer","tracks","toggleTrack","trackIndex","setTrackIndex","trackProgress","setTrackProgress","isPlaying","setIsPlaying","title","audioSrc","audioRef","Audio","intervalRef","isReady","duration","current","toPrevTrack","length","toNextTrack","play","pause","handlePlay","event","eventTarget","target","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,aAAP,MAA0B,qBAA1B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA6B;AAAA;;AAE7C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAACa,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBT,MAAM,CAACE,UAAD,CAAhC;AAEA,QAAMQ,QAAQ,GAAGb,MAAM,CAAC,IAAIc,KAAJ,CAAUF,QAAV,CAAD,CAAvB;AACA,QAAMG,WAAW,GAAGf,MAAM,EAA1B;AACA,QAAMgB,OAAO,GAAGhB,MAAM,CAAC,KAAD,CAAtB;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAeJ,QAAQ,CAACK,OAA9B;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACtB;AACA,QAAId,UAAU,GAAG,CAAb,GAAiB,CAArB,EAAuB;AACnBC,MAAAA,aAAa,CAACH,MAAM,CAACiB,MAAP,GAAgB,CAAjB,CAAb;AACH,KAFD,MAEO;AACHd,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACH;AACJ,GAPD;;AASA,QAAMgB,WAAW,GAAG,MAAM;AACtB;AACA,QAAIhB,UAAU,GAAGF,MAAM,CAACiB,MAAP,GAAe,CAAhC,EAAkC;AAC9Bd,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACH,KAFD,MAEO;AACHC,MAAAA,aAAa,CAAC,CAAD,CAAb;AACH;AACJ,GAPD;;AASAP,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAGU,SAAH,EAAc;AACVI,MAAAA,QAAQ,CAACK,OAAT,CAAiBI,IAAjB;AACH,KAFD,MAEO;AACHT,MAAAA,QAAQ,CAACK,OAAT,CAAiBK,KAAjB;AACH;AACJ,GAPQ,EAOP,CAACd,SAAD,CAPO,CAAT;;AAWA,QAAMe,UAAU,GAAIC,KAAD,IAAW;AACtB,UAAMC,WAAW,GAAGD,KAAK,CAACE,MAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,KAA3B;AACArB,IAAAA,WAAW,CAACsB,WAAD,CAAX;AACP,GAJD;;AAMA,sBAEI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA,kBAAuBf;AAAvB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,aAAD;AACI,QAAA,SAAS,EAAEF,SADf;AAEI,QAAA,WAAW,EAAEU,WAFjB;AAGI,QAAA,WAAW,EAAEE,WAHjB;AAII,QAAA,gBAAgB,EAAEX;AAJtB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAiBH,CAjED;;GAAMR,W;;KAAAA,W;AAmEN,eAAeA,WAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport AudioControls from './AudioControls.jsx';\n\nconst AudioPlayer = ({ tracks, toggleTrack }) => {\n\n    const [trackIndex, setTrackIndex] = useState(0);\n    const [trackProgress, setTrackProgress] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const {title, audioSrc} = tracks[trackIndex];\n    \n    const audioRef = useRef(new Audio(audioSrc));\n    const intervalRef = useRef();\n    const isReady = useRef(false);\n\n    const { duration } = audioRef.current;\n\n    const toPrevTrack = () => {\n        // if trackIndex minus 1 is less than zero, set track index to the last track\n        if (trackIndex - 1 < 0){\n            setTrackIndex(tracks.length - 1);\n        } else {\n            setTrackIndex(trackIndex - 1);\n        }\n    }\n    \n    const toNextTrack = () => {\n        // if trackIndex is less than tracks length go to next track, otherwise go to first track\n        if (trackIndex < tracks.length -1){\n            setTrackIndex(trackIndex + 1);\n        } else {\n            setTrackIndex(0);\n        }\n    }\n    \n    useEffect(() => {\n        // when isPlaying state changes, call play() or stop() according to isPlaying value\n        if(isPlaying) {\n            audioRef.current.play();\n        } else {\n            audioRef.current.pause();\n        }\n    },[isPlaying])\n\n    \n\n    const handlePlay = (event) => {\n            const eventTarget = event.target;\n            console.log(\"eventTarget\", event)\n            toggleTrack(eventTarget);\n    }    \n\n    return(\n        \n        <div className=\"audio-player\">\n            <div className=\"track-info\">\n                <h3 className=\"title\">{title}</h3>\n                <AudioControls\n                    isPlaying={isPlaying}\n                    onPrevClick={toPrevTrack}\n                    onNextClick={toNextTrack}\n                    onPlayPauseClick={setIsPlaying}\n                />\n            </div>\n        </div>\n\n    ) \n            \n\n}\n\nexport default AudioPlayer;"]},"metadata":{},"sourceType":"module"}