{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport AudioAnalyser from './components/Analysers/AudioAnalyser';\nimport AudioPlayer from './components/AudioPlayer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [microphoneStreaming, setMicrophoneStreaming] = useState(false);\n  const [analyserState, setAnalyserState] = useState(null);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    setMicrophoneStreaming(true);\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    microphoneInput.getTracks().forEach(track => track.stop());\n    setAudioSource(null);\n    setAna;\n    setMicrophoneStreaming(false);\n  }\n\n  function stopTrack() {\n    trackInput.getTracks().forEach(track => track.stop());\n    setTrackInput(null);\n  }\n\n  function toggleMicrophone() {\n    if (microphoneInput) {\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  function toggleTrack(track) {\n    if (trackInput) {\n      stopTrack();\n    } else {\n      setAnalyserState({\n        input: track,\n        mode: \"microphone\"\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMicrophone,\n        children: microphoneInput ? 'Stop microphone' : 'Get microphone'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), analyserState.input ? /*#__PURE__*/_jsxDEV(AudioAnalyser, {\n      input: analyserState.input,\n      mode: analyserState.mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 30\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      toggleTrack: toggleTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WeWHF1g7zfFJQyUp+nfkmGCEUD0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/App.js"],"names":["React","useState","useRef","AudioAnalyser","AudioPlayer","App","microphoneStreaming","setMicrophoneStreaming","analyserState","setAnalyserState","getMicrophone","micAudio","navigator","mediaDevices","getUserMedia","audio","video","input","mode","stopMicrophone","microphoneInput","getTracks","forEach","track","stop","setAudioSource","setAna","stopTrack","trackInput","setTrackInput","toggleMicrophone","toggleTrack"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,QAAsC,OAAtC;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAK,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDN,QAAQ,CAAC,KAAD,CAA7D;AACA,QAAK,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,IAAD,CAAjD;;AAEA,iBAAeS,aAAf,GAA+B;AAC7B,QAAIC,QAAQ,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CACnB;AACEC,MAAAA,KAAK,EAAE,IADT;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADmB,CAArB;AAMAT,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAE,IAAAA,gBAAgB,CAAC;AACfQ,MAAAA,KAAK,EAAEN,QADQ;AAEfO,MAAAA,IAAI,EAAE;AAFS,KAAD,CAAhB;AAID;;AAED,WAASC,cAAT,GAA0B;AACxBC,IAAAA,eAAe,CAACC,SAAhB,GAA4BC,OAA5B,CAAoCC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAA7C;AACAC,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAC,IAAAA,MAAM;AACNnB,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD;;AAED,WAASoB,SAAT,GAAqB;AACnBC,IAAAA,UAAU,CAACP,SAAX,GAAuBC,OAAvB,CAA+BC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxC;AACAK,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AAED,WAASC,gBAAT,GAA4B;AAC1B,QAAIV,eAAJ,EAAoB;AAClBD,MAAAA,cAAc;AACf,KAFD,MAEO;AACLT,MAAAA,aAAa;AACd;AACF;;AAED,WAASqB,WAAT,CAAqBR,KAArB,EAA4B;AAC1B,QAAIK,UAAJ,EAAe;AACbD,MAAAA,SAAS;AACV,KAFD,MAEO;AACLlB,MAAAA,gBAAgB,CAAC;AACfQ,QAAAA,KAAK,EAAEM,KADQ;AAEfL,QAAAA,IAAI,EAAE;AAFS,OAAD,CAAhB;AAID;AAEF;;AAKD,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BAEE;AAAQ,QAAA,OAAO,EAAEY,gBAAjB;AAAA,kBACGV,eAAe,GAAG,iBAAH,GAAuB;AADzC;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YAFF,EAYGZ,aAAa,CAACS,KAAd,gBAAsB,QAAC,aAAD;AAAe,MAAA,KAAK,EAAET,aAAa,CAACS,KAApC;AAA2C,MAAA,IAAI,EAAET,aAAa,CAACU;AAA/D;AAAA;AAAA;AAAA;AAAA,YAAtB,GAA+F,EAZlG,eAcE,QAAC,WAAD;AAAa,MAAA,WAAW,EAAEa;AAA1B;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAxEQ1B,G;;KAAAA,G;AA0ET,eAAeA,GAAf","sourcesContent":["import React, {useState, useRef} from 'react';\nimport AudioAnalyser from './components/Analysers/AudioAnalyser';\nimport AudioPlayer from './components/AudioPlayer';\nimport './App.css';\n\nfunction App() {\n\n  const[microphoneStreaming, setMicrophoneStreaming] = useState(false);\n  const[analyserState, setAnalyserState] = useState(null);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia(\n      {\n        audio: true,\n        video: false\n      }\n    )\n    setMicrophoneStreaming(true);\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    microphoneInput.getTracks().forEach(track => track.stop());\n    setAudioSource(null);\n    setAna\n    setMicrophoneStreaming(false);\n  }\n\n  function stopTrack() {\n    trackInput.getTracks().forEach(track => track.stop());\n    setTrackInput(null);\n  }\n\n  function toggleMicrophone() {\n    if (microphoneInput){\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  function toggleTrack(track) {\n    if (trackInput){\n      stopTrack();\n    } else {\n      setAnalyserState({\n        input: track,\n        mode: \"microphone\"\n      });\n    }\n    \n  }\n  \n\n  \n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"controls\">\n        \n        <button onClick={toggleMicrophone}>\n          {microphoneInput ? 'Stop microphone' : 'Get microphone'}\n        </button>\n\n      </div>\n      {/* {microphoneInput ? <MicrophoneAnalyser microphoneInput={microphoneInput} /> : \"\"}\n      {trackInput ? <TrackAnalyser trackInput={trackInput} /> : \"\"} */}\n\n      {analyserState.input ? <AudioAnalyser input={analyserState.input} mode={analyserState.mode}/> : \"\"}\n\n      <AudioPlayer toggleTrack={toggleTrack}></AudioPlayer>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}