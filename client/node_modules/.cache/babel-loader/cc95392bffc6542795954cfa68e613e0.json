{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audio\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array());\n  let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  let analyser = audioContext.createAnalyser();\n  let dataArray;\n  let source;\n  let rafId;\n  useEffect(() => {\n    console.log('mount me daddy');\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\n    source = audioContext.createMediaStreamSource(audio);\n    source.connect(analyser);\n    rafId = requestAnimationFrame(tick);\n    console.log(\"function has been called\");\n  }, []);\n\n  let tick = () => {\n    console.log('tick tick muthafucka');\n    analyser.getByteTimeDomainData(dataArray);\n    setAudioData(dataArray);\n    rafId = requestAnimationFrame(tick);\n  };\n\n  function componentWillUnmount() {\n    cancelAnimationFrame(rafId);\n    analyser.disconnect();\n    source.disconnect();\n  } // componentWillUnmount()\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"A9mH2REwVuk5Zr5YivScdT+42Ug=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","audio","audioData","setAudioData","Uint8Array","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","source","rafId","console","log","frequencyBinCount","createMediaStreamSource","connect","requestAnimationFrame","tick","getByteTimeDomainData","componentWillUnmount","cancelAnimationFrame","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAEjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,EAAD,CAA1C;AAEA,MAAIC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAnB;AACA,MAAIC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AACA,MAAIC,SAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;AAEAhB,EAAAA,SAAS,CAAE,MAAM;AACbiB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAJ,IAAAA,SAAS,GAAG,IAAIP,UAAJ,CAAeK,QAAQ,CAACO,iBAAxB,CAAZ;AACAJ,IAAAA,MAAM,GAAGP,YAAY,CAACY,uBAAb,CAAqChB,KAArC,CAAT;AACAW,IAAAA,MAAM,CAACM,OAAP,CAAeT,QAAf;AACAI,IAAAA,KAAK,GAAGM,qBAAqB,CAACC,IAAD,CAA7B;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH,GAPQ,EAON,EAPM,CAAT;;AAUI,MAAIK,IAAI,GAAG,MAAK;AAChBN,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAN,IAAAA,QAAQ,CAACY,qBAAT,CAA+BV,SAA/B;AACAR,IAAAA,YAAY,CAACQ,SAAD,CAAZ;AACAE,IAAAA,KAAK,GAAGM,qBAAqB,CAACC,IAAD,CAA7B;AACH,GALG;;AAQJ,WAASE,oBAAT,GAAgC;AAC5BC,IAAAA,oBAAoB,CAACV,KAAD,CAApB;AACAJ,IAAAA,QAAQ,CAACe,UAAT;AACAZ,IAAAA,MAAM,CAACY,UAAP;AACH,GAhCgC,CAkCjC;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEtB;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAxCD;;GAAMF,a;;KAAAA,a;AA0CN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audio }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array());\n\n    let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = audioContext.createAnalyser();\n    let dataArray;\n    let source;\n    let rafId;\n    \n    useEffect( () => {\n        console.log('mount me daddy');\n        dataArray = new Uint8Array(analyser.frequencyBinCount) ;\n        source = audioContext.createMediaStreamSource(audio);\n        source.connect(analyser);\n        rafId = requestAnimationFrame(tick);\n        console.log(\"function has been called\")\n    }, [])\n\n    \n        let tick = () =>{\n        console.log('tick tick muthafucka');\n        analyser.getByteTimeDomainData(dataArray);\n        setAudioData(dataArray)\n        rafId = requestAnimationFrame(tick);\n    }\n\n\n    function componentWillUnmount() {\n        cancelAnimationFrame(rafId);\n        analyser.disconnect();\n        source.disconnect();\n    }\n\n    // componentWillUnmount()\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}