{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FrequencyVisualiser = ({\n  audioData,\n  analyser\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    let randomColour = \"#\" + ((1 << 24) * Math.random() | 0).toString(16);\n    analyser.fftSize = 256;\n    console.log(analyser); //bufferLength equals half the fftSize i.e. 128\n\n    let bufferLength = analyser.frequencyBinCount;\n    console.log(\"buffer length\", bufferLength); // let dataArray = new Uint8Array(bufferLength);\n\n    context.clearRect(0, 0, width, height);\n\n    const render = () => {\n      context.fillStyle = 'rgb(0, 0 , 0)';\n      context.fillRect(0, 0, width, height);\n      let barWidth = width / bufferLength * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        // the height of a bar equals the current audio sample value halved\n        barHeight = audioData[i] / 0.5;\n        context.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';\n        context.fillRect(x, height - barHeight / 2, barWidth, barHeight);\n        x += barWidth + 1;\n      }\n    };\n\n    render();\n  }, [audioData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas\",\n    width: \"300\",\n    height: \"300\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FrequencyVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = FrequencyVisualiser;\nexport default FrequencyVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js"],"names":["React","useRef","useEffect","FrequencyVisualiser","audioData","analyser","canvasRef","canvas","current","height","width","context","getContext","randomColour","Math","random","toString","fftSize","console","log","bufferLength","frequencyBinCount","clearRect","render","fillStyle","fillRect","barWidth","barHeight","x","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC,C,CAEA;AACA;;;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAAA;;AAErD,QAAMC,SAAS,GAAGL,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIK,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,YAAY,GAAG,MAAM,CAAC,CAAC,KAAK,EAAN,IAAYC,IAAI,CAACC,MAAL,EAAZ,GAA4B,CAA7B,EAAgCC,QAAhC,CAAyC,EAAzC,CAAzB;AAEAX,IAAAA,QAAQ,CAACY,OAAT,GAAmB,GAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ,EATY,CAUZ;;AACA,QAAIe,YAAY,GAAGf,QAAQ,CAACgB,iBAA5B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BC,YAA7B,EAZY,CAaZ;;AAEAT,IAAAA,OAAO,CAACW,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBZ,KAAxB,EAA+BD,MAA/B;;AAEA,UAAMc,MAAM,GAAG,MAAM;AACjBZ,MAAAA,OAAO,CAACa,SAAR,GAAoB,eAApB;AACAb,MAAAA,OAAO,CAACc,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBf,KAAvB,EAA8BD,MAA9B;AAEA,UAAIiB,QAAQ,GAAIhB,KAAK,GAAGU,YAAT,GAAyB,GAAxC;AACA,UAAIO,SAAJ;AACA,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,YAApB,EAAkCS,CAAC,EAAnC,EAAuC;AACnC;AACAF,QAAAA,SAAS,GAAGvB,SAAS,CAACyB,CAAD,CAAT,GAAe,GAA3B;AAEAlB,QAAAA,OAAO,CAACa,SAAR,GAAoB,UAAUG,SAAS,GAAG,GAAtB,IAA6B,SAAjD;AACAhB,QAAAA,OAAO,CAACc,QAAR,CAAiBG,CAAjB,EAAoBnB,MAAM,GAAGkB,SAAS,GAAG,CAAzC,EAA4CD,QAA5C,EAAsDC,SAAtD;AAEAC,QAAAA,CAAC,IAAIF,QAAQ,GAAG,CAAhB;AACH;AACJ,KAjBD;;AAmBAH,IAAAA,MAAM;AAET,GAtCQ,EAsCN,CAACnB,SAAD,CAtCM,CAAT;AAwCA,sBACI;AACI,IAAA,SAAS,EAAC,QADd;AAEI,IAAA,KAAK,EAAC,KAFV;AAGI,IAAA,MAAM,EAAC,KAHX;AAII,IAAA,GAAG,EAAEE;AAJT;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CArDD;;GAAMH,mB;;KAAAA,mB;AAuDN,eAAeA,mBAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({ audioData, analyser }) => {\n\n    const canvasRef = useRef();\n\n    useEffect(() => {\n\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n        let randomColour = \"#\" + ((1 << 24) * Math.random() | 0).toString(16)\n\n        analyser.fftSize = 256;\n        console.log(analyser)\n        //bufferLength equals half the fftSize i.e. 128\n        let bufferLength = analyser.frequencyBinCount;\n        console.log(\"buffer length\", bufferLength);\n        // let dataArray = new Uint8Array(bufferLength);\n\n        context.clearRect(0, 0, width, height);\n\n        const render = () => {\n            context.fillStyle = 'rgb(0, 0 , 0)';\n            context.fillRect(0, 0, width, height);\n\n            let barWidth = (width / bufferLength) * 2.5;\n            let barHeight;\n            let x = 0;\n\n            for (var i = 0; i < bufferLength; i++) {\n                // the height of a bar equals the current audio sample value halved\n                barHeight = audioData[i] / 0.5;\n\n                context.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';\n                context.fillRect(x, height - barHeight / 2, barWidth, barHeight)\n\n                x += barWidth + 1;\n            }\n        };\n\n        render()\n\n    }, [audioData]);\n\n    return (\n        <canvas\n            className=\"canvas\"\n            width=\"300\"\n            height=\"300\"\n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default FrequencyVisualiser;"]},"metadata":{},"sourceType":"module"}