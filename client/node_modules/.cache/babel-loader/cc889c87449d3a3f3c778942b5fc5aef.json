{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/WaveformVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WaveformVisualiser = ({\n  audioData,\n  setAnalyserDisconnected,\n  analyserDisconnected\n}) => {\n  _s();\n\n  const canvasRef = useRef(); //clear the canvas every 30 seconds\n  // useEffect(() => {\n  //     const clearCanvas = () => {\n  //         context.clearRect(0, 0, width, height);\n  //     }\n  //     setInterval(clearCanvas, 30000)\n  // },[])\n\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    let x = 0;\n    let sliceWidth = width * 0.5 / audioData.length;\n    let randomColour = \"#\" + ((1 << 24) * Math.random() | 0).toString(16);\n    context.fillRect(0, 0, canvas.width, canvas); // if the analyser has been disconnected clear the canvas and reset analyserDisconnected to false\n\n    if (analyserDisconnected) {\n      context.clearRect(0, 0, width, height);\n      setAnalyserDisconnected(false);\n    }\n\n    const renderWaveform = () => {\n      context.lineWidth = 2;\n      context.strokeStyle = randomColour;\n      context.beginPath();\n      context.moveTo(0, height / 2);\n\n      for (const item of audioData) {\n        const y = item / 255.0 * height;\n        context.lineTo(x, y);\n        x += sliceWidth;\n      } // console.log(\"Audio-data:\", audioData)\n\n\n      context.lineTo(x, height / 2);\n      context.stroke();\n    };\n\n    renderWaveform();\n  }, [audioData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas\",\n    width: \"900\",\n    height: \"550\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WaveformVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = WaveformVisualiser;\nexport default WaveformVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"WaveformVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/WaveformVisualiser.js"],"names":["React","useRef","useEffect","WaveformVisualiser","audioData","setAnalyserDisconnected","analyserDisconnected","canvasRef","canvas","current","height","width","context","getContext","x","sliceWidth","length","randomColour","Math","random","toString","fillRect","clearRect","renderWaveform","lineWidth","strokeStyle","beginPath","moveTo","item","y","lineTo","stroke"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;AACA;;;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,uBAAZ;AAAqCC,EAAAA;AAArC,CAAD,KAAgE;AAAA;;AAEvF,QAAMC,SAAS,GAAGN,MAAM,EAAxB,CAFuF,CAIvF;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,UAAU,GAAIJ,KAAK,GAAG,GAAT,GAAgBP,SAAS,CAACY,MAA3C;AACA,QAAIC,YAAY,GAAG,MAAM,CAAC,CAAC,KAAG,EAAJ,IAAQC,IAAI,CAACC,MAAL,EAAR,GAAwB,CAAzB,EAA4BC,QAA5B,CAAqC,EAArC,CAAzB;AACAR,IAAAA,OAAO,CAACS,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBb,MAAM,CAACG,KAA9B,EAAqCH,MAArC,EARY,CASZ;;AACA,QAAGF,oBAAH,EAAwB;AACpBM,MAAAA,OAAO,CAACU,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBX,KAAxB,EAA+BD,MAA/B;AACAL,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACH;;AAGD,UAAMkB,cAAc,GAAG,MAAM;AACzBX,MAAAA,OAAO,CAACY,SAAR,GAAoB,CAApB;AACAZ,MAAAA,OAAO,CAACa,WAAR,GAAsBR,YAAtB;AAEAL,MAAAA,OAAO,CAACc,SAAR;AACAd,MAAAA,OAAO,CAACe,MAAR,CAAe,CAAf,EAAkBjB,MAAM,GAAG,CAA3B;;AAEA,WAAI,MAAMkB,IAAV,IAAkBxB,SAAlB,EAA6B;AACzB,cAAMyB,CAAC,GAAID,IAAI,GAAG,KAAR,GAAiBlB,MAA3B;AACAE,QAAAA,OAAO,CAACkB,MAAR,CAAehB,CAAf,EAAkBe,CAAlB;AACAf,QAAAA,CAAC,IAAIC,UAAL;AACH,OAXwB,CAYzB;;;AACAH,MAAAA,OAAO,CAACkB,MAAR,CAAehB,CAAf,EAAkBJ,MAAM,GAAG,CAA3B;AACAE,MAAAA,OAAO,CAACmB,MAAR;AAEH,KAhBD;;AAkBAR,IAAAA,cAAc;AAGjB,GArCQ,EAqCN,CAACnB,SAAD,CArCM,CAAT;AAuCA,sBACI;AACI,IAAA,SAAS,EAAC,QADd;AAEI,IAAA,KAAK,EAAC,KAFV;AAGI,IAAA,MAAM,EAAC,KAHX;AAII,IAAA,GAAG,EAAEG;AAJT;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA9DD;;GAAMJ,kB;;KAAAA,kB;AAgEN,eAAeA,kBAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst WaveformVisualiser = ({audioData, setAnalyserDisconnected, analyserDisconnected}) => {\n\n    const canvasRef = useRef();\n    \n    //clear the canvas every 30 seconds\n    // useEffect(() => {\n        \n    //     const clearCanvas = () => {\n    //         context.clearRect(0, 0, width, height);\n    //     }\n    //     setInterval(clearCanvas, 30000)\n\n    // },[])\n\n    useEffect(() => {\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n        let x = 0;\n        let sliceWidth = (width * 0.5) / audioData.length;\n        let randomColour = \"#\" + ((1<<24)*Math.random() | 0).toString(16)\n        context.fillRect(0, 0, canvas.width, canvas)\n        // if the analyser has been disconnected clear the canvas and reset analyserDisconnected to false\n        if(analyserDisconnected){\n            context.clearRect(0, 0, width, height);\n            setAnalyserDisconnected(false)\n        }\n        \n\n        const renderWaveform = () => {\n            context.lineWidth = 2;\n            context.strokeStyle = randomColour;\n            \n            context.beginPath();\n            context.moveTo(0, height / 2);\n\n            for(const item of audioData) {\n                const y = (item / 255.0) * height;\n                context.lineTo(x, y);\n                x += sliceWidth;\n            }\n            // console.log(\"Audio-data:\", audioData)\n            context.lineTo(x, height / 2);\n            context.stroke();\n            \n        }\n        \n        renderWaveform()\n        \n\n    }, [audioData])\n\n    return(\n        <canvas \n            className=\"canvas\"\n            width=\"900\" \n            height=\"550\" \n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default WaveformVisualiser;"]},"metadata":{},"sourceType":"module"}