{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({\n  audioData,\n  analyser\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d'); // small fftSize so that each bar is big enough to look like a bar\n\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    console.log(bufferLength);\n    const dataArray = new Uint8Array(bufferLength);\n    context.clearRect(0, 0, width, height);\n\n    const render = () => {\n      analyser.getByteFrequencyData(dataArray);\n      context.fillStyle = 'rgb(0, 0, 0)';\n      context.fillRect(0, 0, width, height);\n      const barWidth = width / bufferLength * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for (let i = 0; i < bufferLength; i++) {\n        barHeight = audioData[i] / 2;\n        context.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';\n      }\n    };\n  }, []);\n};\n\n_s(FrequencyVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = FrequencyVisualiser;\nexport default FrequencyVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js"],"names":["React","useRef","useEffect","FrequencyVisualiser","audioData","analyser","canvasRef","canvas","current","height","width","context","getContext","fftSize","bufferLength","frequencyBinCount","console","log","dataArray","Uint8Array","clearRect","render","getByteFrequencyData","fillStyle","fillRect","barWidth","barHeight","x","i"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;AACA;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAAA;;AAErD,QAAMC,SAAS,GAAGL,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMK,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,MAAM,GAAGF,MAAM,CAACE,MAAtB;AACA,UAAMC,KAAK,GAAGH,MAAM,CAACG,KAArB;AACA,UAAMC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAhB,CALY,CAOZ;;AACAP,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,GAAnB;AACA,UAAMC,YAAY,GAAGT,QAAQ,CAACU,iBAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,UAAMI,SAAS,GAAI,IAAIC,UAAJ,CAAeL,YAAf,CAAnB;AAEAH,IAAAA,OAAO,CAACS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBV,KAAxB,EAA+BD,MAA/B;;AAEA,UAAMY,MAAM,GAAG,MAAM;AACjBhB,MAAAA,QAAQ,CAACiB,oBAAT,CAA8BJ,SAA9B;AAEAP,MAAAA,OAAO,CAACY,SAAR,GAAoB,cAApB;AACAZ,MAAAA,OAAO,CAACa,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBd,KAAvB,EAA8BD,MAA9B;AAEA,YAAMgB,QAAQ,GAAIf,KAAK,GAAGI,YAAT,GAAyB,GAA1C;AACA,UAAIY,SAAJ;AACA,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGd,YAAnB,EAAiCc,CAAC,EAAlC,EAAsC;AAClCF,QAAAA,SAAS,GAAGtB,SAAS,CAACwB,CAAD,CAAT,GAAe,CAA3B;AAEAjB,QAAAA,OAAO,CAACY,SAAR,GAAoB,UAAUG,SAAS,GAAC,GAApB,IAA2B,SAA/C;AAEH;AACJ,KAhBD;AAkBH,GAjCQ,EAiCN,EAjCM,CAAT;AAmCH,CAvCD;;GAAMvB,mB;;KAAAA,mB;AAyCN,eAAeA,mBAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({ audioData, analyser }) => {\n\n    const canvasRef = useRef();\n    \n    useEffect(() => {\n\n        const canvas = canvasRef.current;\n        const height = canvas.height;\n        const width = canvas.width;\n        const context = canvas.getContext('2d');\n\n        // small fftSize so that each bar is big enough to look like a bar\n        analyser.fftSize = 256;\n        const bufferLength = analyser.frequencyBinCount;\n        console.log(bufferLength);\n        const dataArray =  new Uint8Array(bufferLength);\n\n        context.clearRect(0, 0, width ,height);\n\n        const render = () => {\n            analyser.getByteFrequencyData(dataArray);\n\n            context.fillStyle = 'rgb(0, 0, 0)';\n            context.fillRect(0, 0, width, height)\n\n            const barWidth = (width / bufferLength) * 2.5\n            let barHeight;\n            let x = 0;\n\n            for(let i = 0; i < bufferLength; i++) {\n                barHeight = audioData[i] / 2;\n\n                context.fillStyle = 'rgb(' + (barHeight+100) + ',50,50)';\n                \n            }\n        }\n\n    }, []);\n\n}\n\nexport default FrequencyVisualiser;"]},"metadata":{},"sourceType":"module"}