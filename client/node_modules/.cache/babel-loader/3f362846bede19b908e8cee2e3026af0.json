{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FrequencyVisualiser = ({\n  audioData\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    let bufferLength = analyser.frequencyBinCount;\n    let dataArray = new Uint8Array(bufferLength);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas\",\n    width: \"1024\",\n    height: \"1024\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FrequencyVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = FrequencyVisualiser;\nexport default FrequencyVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js"],"names":["React","useRef","useEffect","FrequencyVisualiser","audioData","canvasRef","canvas","current","height","width","context","getContext","bufferLength","analyser","frequencyBinCount","dataArray","Uint8Array"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;AACA;;;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AAEzC,QAAMC,SAAS,GAAGJ,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAII,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AAEA,QAAIC,YAAY,GAAGC,QAAQ,CAACC,iBAA5B;AACA,QAAIC,SAAS,GAAG,IAAIC,UAAJ,CAAeJ,YAAf,CAAhB;AAGH,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACI;AACI,IAAA,SAAS,EAAC,QADd;AAEI,IAAA,KAAK,EAAC,MAFV;AAGI,IAAA,MAAM,EAAC,MAHX;AAII,IAAA,GAAG,EAAEP;AAJT;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA1BD;;GAAMF,mB;;KAAAA,mB;AA4BN,eAAeA,mBAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({audioData}) => {\n\n    const canvasRef = useRef();\n    \n    useEffect(() => {\n        \n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n\n        let bufferLength = analyser.frequencyBinCount;\n        let dataArray = new Uint8Array(bufferLength);\n\n\n    }, []);\n\n    return(\n        <canvas \n            className=\"canvas\"\n            width=\"1024\" \n            height=\"1024\" \n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default FrequencyVisualiser; "]},"metadata":{},"sourceType":"module"}