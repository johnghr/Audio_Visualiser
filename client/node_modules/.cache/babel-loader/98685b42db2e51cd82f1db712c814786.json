{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioVisualiser = ({\n  audioData\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n  });\n\n  function draw() {\n    // const {audioData} = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const sliceWidth = width * 1.0 / audioData.length;\n    context.lineWidth = 2;\n    context.strokeStyle = '#000000';\n    context.clearRect(0, 0, width, height);\n    context.beginPath();\n    context.moveTo(0, height / 2);\n\n    for (const item of audioData) {\n      const y = item / 255.0 * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  function componentDidUpdate() {\n    draw();\n  }\n\n  componentDidUpdate();\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    width: \"300\",\n    height: \"300\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = AudioVisualiser;\nexport default AudioVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioVisualiser.js"],"names":["React","useRef","useEffect","AudioVisualiser","audioData","canvasRef","canvas","current","context","getContext","draw","height","width","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","beginPath","moveTo","item","y","lineTo","stroke","componentDidUpdate"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC;;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AAErC,QAAMC,SAAS,GAAGJ,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMI,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACH,GAHQ,CAAT;;AAKA,WAASC,IAAT,GAAgB;AACZ;AACA,UAAMJ,MAAM,GAAG,KAAKA,MAAL,CAAYC,OAA3B;AACA,UAAMI,MAAM,GAAGL,MAAM,CAACK,MAAtB;AACA,UAAMC,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,UAAMJ,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACA,QAAII,CAAC,GAAG,CAAR;AACA,UAAMC,UAAU,GAAIF,KAAK,GAAG,GAAT,GAAgBR,SAAS,CAACW,MAA7C;AAEAP,IAAAA,OAAO,CAACQ,SAAR,GAAoB,CAApB;AACAR,IAAAA,OAAO,CAACS,WAAR,GAAsB,SAAtB;AACAT,IAAAA,OAAO,CAACU,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBN,KAAxB,EAA+BD,MAA/B;AAEAH,IAAAA,OAAO,CAACW,SAAR;AACAX,IAAAA,OAAO,CAACY,MAAR,CAAe,CAAf,EAAkBT,MAAM,GAAG,CAA3B;;AAEA,SAAI,MAAMU,IAAV,IAAkBjB,SAAlB,EAA6B;AACzB,YAAMkB,CAAC,GAAID,IAAI,GAAG,KAAR,GAAiBV,MAA3B;AACAH,MAAAA,OAAO,CAACe,MAAR,CAAeV,CAAf,EAAkBS,CAAlB;AACAT,MAAAA,CAAC,IAAIC,UAAL;AACH;;AAEDN,IAAAA,OAAO,CAACe,MAAR,CAAeV,CAAf,EAAkBF,MAAM,GAAG,CAA3B;AACAH,IAAAA,OAAO,CAACgB,MAAR;AAGH;;AAED,WAASC,kBAAT,GAA8B;AAC1Bf,IAAAA,IAAI;AACP;;AAEDe,EAAAA,kBAAkB;AAElB,sBACI;AACA,IAAA,KAAK,EAAC,KADN;AAEA,IAAA,MAAM,EAAC,KAFP;AAGA,IAAA,GAAG,EAAEpB;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAnDD;;GAAMF,e;;KAAAA,e;AAqDN,eAAeA,eAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\nconst AudioVisualiser = ({audioData}) => {\n\n    const canvasRef = useRef(null)\n    \n    useEffect(() => {\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n    })\n\n    function draw() {\n        // const {audioData} = this.props;\n        const canvas = this.canvas.current;\n        const height = canvas.height;\n        const width = canvas.width;\n        const context = canvas.getContext('2d');\n        let x = 0;\n        const sliceWidth = (width * 1.0) / audioData.length;\n\n        context.lineWidth = 2;\n        context.strokeStyle = '#000000';\n        context.clearRect(0, 0, width, height);\n\n        context.beginPath();\n        context.moveTo(0, height / 2);\n\n        for(const item of audioData) {\n            const y = (item / 255.0) * height;\n            context.lineTo(x, y);\n            x += sliceWidth;\n        }\n\n        context.lineTo(x, height / 2);\n        context.stroke();\n\n        \n    }\n    \n    function componentDidUpdate() {\n        draw();\n    }\n\n    componentDidUpdate()\n\n    return(\n        <canvas \n        width=\"300\" \n        height=\"300\" \n        ref={canvasRef}\n        />\n    )\n\n}\n\nexport default AudioVisualiser;"]},"metadata":{},"sourceType":"module"}