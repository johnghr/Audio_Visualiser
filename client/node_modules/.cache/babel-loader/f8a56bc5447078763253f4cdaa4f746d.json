{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AudioAnalyser from './components/Analysers/AudioAnalyser';\nimport { tracks } from './components/AudioPlayer/tracks';\nimport AudioPlayer from './components/AudioPlayer/AudioPlayer';\nimport './App.css'; //your da sells the avon\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //mode can be 'off', 'track' or 'microphone'\n  const initialAnalyserState = {\n    input: null,\n    mode: 'off'\n  };\n  const [analyserState, setAnalyserState] = useState(initialAnalyserState);\n  const [visualiserState, setVisualiserState] = useState(\"WaveForm\");\n\n  const resetAnalyser = () => setAnalyserState(initialAnalyserState);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function onPauseTrack() {\n    console.log(\"onPauseTrack hit\");\n    resetAnalyser();\n  }\n\n  function toggleMicrophone() {\n    if (analyserState.mode === 'microphone') {\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  const onChangeTrack = track => {\n    console.log('on change track', track);\n    setAnalyserState({\n      input: track,\n      mode: \"track\"\n    });\n  };\n\n  const toggleVisualiser = () => {\n    if (visualiserState === \"Waveform Visualiser\") {\n      setVisualiserState(\"Frequency Visualiser\");\n    } else {\n      setVisualiserState(\"Waveform Visualiser\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMicrophone,\n        children: analyserState.mode === 'microphone' ? 'Stop microphone' : 'Get microphone'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisualiser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), analyserState.input ? /*#__PURE__*/_jsxDEV(AudioAnalyser, {\n      input: analyserState.input,\n      mode: analyserState.mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 30\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      tracks: tracks,\n      onChangeTrack: onChangeTrack,\n      onPauseTrack: onPauseTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EbjGDDqbhDPnFzLeo+dHRSjaiwM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/App.js"],"names":["React","useState","AudioAnalyser","tracks","AudioPlayer","App","initialAnalyserState","input","mode","analyserState","setAnalyserState","visualiserState","setVisualiserState","resetAnalyser","getMicrophone","micAudio","navigator","mediaDevices","getUserMedia","audio","video","stopMicrophone","getTracks","forEach","track","stop","onPauseTrack","console","log","toggleMicrophone","onChangeTrack","toggleVisualiser"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport AudioAnalyser from './components/Analysers/AudioAnalyser';\nimport {tracks} from './components/AudioPlayer/tracks'\nimport AudioPlayer from './components/AudioPlayer/AudioPlayer'\nimport './App.css';\n\n\n//your da sells the avon\nfunction App() {\n  //mode can be 'off', 'track' or 'microphone'\n  const initialAnalyserState = {input: null, mode: 'off'};\n  const[analyserState, setAnalyserState] = useState(initialAnalyserState);\n  const[visualiserState, setVisualiserState] = useState(\"WaveForm\")\n\n  const resetAnalyser = () => setAnalyserState(initialAnalyserState);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia(\n      {\n        audio: true,\n        video: false\n      }\n    )\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function onPauseTrack() {\n    console.log(\"onPauseTrack hit\")\n    resetAnalyser();\n  }\n\n  function toggleMicrophone() {\n    if (analyserState.mode  === 'microphone'){\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  const onChangeTrack = (track) => {\n    console.log('on change track', track);\n    setAnalyserState({\n      input: track,\n      mode: \"track\"\n    })\n  }\n\n  const toggleVisualiser = () => {\n      if(visualiserState === \"Waveform Visualiser\" ) {\n        setVisualiserState(\"Frequency Visualiser\")\n      } else {\n        setVisualiserState(\"Waveform Visualiser\")\n      }\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"controls\">\n        \n        <button onClick={toggleMicrophone}>\n          {analyserState.mode === 'microphone' ? 'Stop microphone' : 'Get microphone'}\n        </button>\n        <button onClick={toggleVisualiser}>\n        \n        </button>\n\n      </div>\n\n      {analyserState.input ? <AudioAnalyser input={analyserState.input} mode={analyserState.mode}/> : \"\"}\n\n      <AudioPlayer tracks={tracks} onChangeTrack={onChangeTrack} onPauseTrack={onPauseTrack}></AudioPlayer>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}