{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audio\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(null);\n  let audioContext;\n  let analyser;\n  let dataArray;\n  let source;\n  let rafId;\n\n  function componentDidMount() {\n    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    analyser = audioContext.createAnalyser();\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\n    source = audioContext.createMediaStreamSource(audio);\n    source.connect(analyser);\n    rafId = requestAnimationFrame(tick);\n    console.log(\"function has been called\");\n  }\n\n  componentDidMount();\n\n  let tick = () => {\n    analyser.getByteTimeDomainData(dataArray);\n    setAudioData(dataArray);\n    rafId = requestAnimationFrame(tick);\n  };\n\n  function componentWillUnmount() {\n    cancelAnimationFrame(rafId);\n    analyser.disconnect();\n    source.disconnect();\n  }\n\n  componentWillUnmount();\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"HHPfUd2m5CSbAVJgZ71x2MpznkA=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useState","AudioVisualiser","AudioAnalyser","audio","audioData","setAudioData","audioContext","analyser","dataArray","source","rafId","componentDidMount","window","AudioContext","webkitAudioContext","createAnalyser","Uint8Array","frequencyBinCount","createMediaStreamSource","connect","requestAnimationFrame","tick","console","log","getByteTimeDomainData","componentWillUnmount","cancelAnimationFrame","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAAA;;AAE/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAD,CAA1C;AAEA,MAAIM,YAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;;AAEA,WAASC,iBAAT,GAA6B;AACzBL,IAAAA,YAAY,GAAG,KAAKM,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAf;AACAP,IAAAA,QAAQ,GAAGD,YAAY,CAACS,cAAb,EAAX;AACAP,IAAAA,SAAS,GAAG,IAAIQ,UAAJ,CAAeT,QAAQ,CAACU,iBAAxB,CAAZ;AACAR,IAAAA,MAAM,GAAGH,YAAY,CAACY,uBAAb,CAAqCf,KAArC,CAAT;AACAM,IAAAA,MAAM,CAACU,OAAP,CAAeZ,QAAf;AACAG,IAAAA,KAAK,GAAGU,qBAAqB,CAACC,IAAD,CAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AAEDZ,EAAAA,iBAAiB;;AAEb,MAAIU,IAAI,GAAG,MAAM;AACjBd,IAAAA,QAAQ,CAACiB,qBAAT,CAA+BhB,SAA/B;AACAH,IAAAA,YAAY,CAACG,SAAD,CAAZ;AACAE,IAAAA,KAAK,GAAGU,qBAAqB,CAACC,IAAD,CAA7B;AACH,GAJG;;AAOJ,WAASI,oBAAT,GAAgC;AAC5BC,IAAAA,oBAAoB,CAAChB,KAAD,CAApB;AACAH,IAAAA,QAAQ,CAACoB,UAAT;AACAlB,IAAAA,MAAM,CAACkB,UAAP;AACH;;AAEDF,EAAAA,oBAAoB;AAEpB,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAErB;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAzCD;;GAAMF,a;;KAAAA,a;AA2CN,eAAeA,aAAf","sourcesContent":["import React, {useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({audio}) => {\n\n    const [audioData, setAudioData] = useState(null);\n\n    let audioContext;\n    let analyser;\n    let dataArray;\n    let source;\n    let rafId;\n\n    function componentDidMount() {\n        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        analyser = audioContext.createAnalyser();\n        dataArray = new Uint8Array(analyser.frequencyBinCount);\n        source = audioContext.createMediaStreamSource(audio);\n        source.connect(analyser);\n        rafId = requestAnimationFrame(tick);\n        console.log(\"function has been called\")\n    }\n\n    componentDidMount();\n\n        let tick = () => {\n        analyser.getByteTimeDomainData(dataArray);\n        setAudioData(dataArray)\n        rafId = requestAnimationFrame(tick);\n    }\n\n\n    function componentWillUnmount() {\n        cancelAnimationFrame(rafId);\n        analyser.disconnect();\n        source.disconnect();\n    }\n\n    componentWillUnmount()\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}