{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioVisualiser = ({\n  audioData\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    let x = 0;\n    let sliceWidth = width * 1.0 / audioData.length;\n    context.lineWidth = 2;\n    context.strokeStyle = '#000000';\n    context.clearRect(0, 0, width, height);\n    let requestId;\n\n    const render = () => {\n      context.beginPath();\n      context.moveTo(0, height / 2);\n\n      for (const item of audioData) {\n        const y = item / 255.0 * height;\n        context.lineTo(x, y);\n        x += sliceWidth;\n      }\n\n      context.lineTo(x, height / 2);\n      context.stroke();\n      requestId = requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  }, render()); // function componentDidUpdate() {\n  //     draw();\n  // }\n  // componentDidUpdate()\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    width: \"300\",\n    height: \"300\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = AudioVisualiser;\nexport default AudioVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioVisualiser.js"],"names":["React","useRef","useEffect","AudioVisualiser","audioData","canvasRef","canvas","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","requestId","render","beginPath","moveTo","item","y","lineTo","stroke","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC;;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AAErC,QAAMC,SAAS,GAAGJ,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,UAAU,GAAIJ,KAAK,GAAG,GAAT,GAAgBL,SAAS,CAACU,MAA3C;AAEAJ,IAAAA,OAAO,CAACK,SAAR,GAAoB,CAApB;AACAL,IAAAA,OAAO,CAACM,WAAR,GAAsB,SAAtB;AACAN,IAAAA,OAAO,CAACO,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBR,KAAxB,EAA+BD,MAA/B;AAEA,QAAIU,SAAJ;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACjBT,MAAAA,OAAO,CAACU,SAAR;AACAV,MAAAA,OAAO,CAACW,MAAR,CAAe,CAAf,EAAkBb,MAAM,GAAG,CAA3B;;AAEA,WAAI,MAAMc,IAAV,IAAkBlB,SAAlB,EAA6B;AACzB,cAAMmB,CAAC,GAAID,IAAI,GAAG,KAAR,GAAiBd,MAA3B;AACAE,QAAAA,OAAO,CAACc,MAAR,CAAeZ,CAAf,EAAkBW,CAAlB;AACAX,QAAAA,CAAC,IAAIC,UAAL;AACH;;AAEDH,MAAAA,OAAO,CAACc,MAAR,CAAeZ,CAAf,EAAkBJ,MAAM,GAAG,CAA3B;AACAE,MAAAA,OAAO,CAACe,MAAR;AACAP,MAAAA,SAAS,GAAGQ,qBAAqB,CAACP,MAAD,CAAjC;AACH,KAbD;;AAeAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACTQ,MAAAA,oBAAoB,CAACT,SAAD,CAApB;AACH,KAFD;AAIH,GAnCQ,EAmCNC,MAAM,EAnCA,CAAT,CAJqC,CA+CrC;AACA;AACA;AAEA;;AAEA,sBACI;AACA,IAAA,KAAK,EAAC,KADN;AAEA,IAAA,MAAM,EAAC,KAFP;AAGA,IAAA,GAAG,EAAEd;AAHL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA7DD;;GAAMF,e;;KAAAA,e;AA+DN,eAAeA,eAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\nconst AudioVisualiser = ({audioData}) => {\n\n    const canvasRef = useRef();\n    \n    useEffect(() => {\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n        let x = 0;\n        let sliceWidth = (width * 1.0) / audioData.length;\n\n        context.lineWidth = 2;\n        context.strokeStyle = '#000000';\n        context.clearRect(0, 0, width, height);\n        \n        let requestId;\n\n        const render = () => {\n            context.beginPath();\n            context.moveTo(0, height / 2);\n\n            for(const item of audioData) {\n                const y = (item / 255.0) * height;\n                context.lineTo(x, y);\n                x += sliceWidth;\n            }\n\n            context.lineTo(x, height / 2);\n            context.stroke();\n            requestId = requestAnimationFrame(render);\n        }\n        \n        render()\n\n        return () => {\n            cancelAnimationFrame(requestId)\n        }\n        \n    }, render())\n\n    \n        \n\n        \n    \n    \n    // function componentDidUpdate() {\n    //     draw();\n    // }\n\n    // componentDidUpdate()\n\n    return(\n        <canvas \n        width=\"300\" \n        height=\"300\" \n        ref={canvasRef}\n        />\n    )\n\n}\n\nexport default AudioVisualiser;"]},"metadata":{},"sourceType":"module"}