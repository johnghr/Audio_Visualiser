{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audio\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\n  let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  let analyser;\n  let dataArray;\n  let source;\n  let rafId;\n\n  function componentDidMount() {\n    analyser = audioContext.createAnalyser();\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\n    source = audioContext.createMediaStreamSource(audio);\n    source.connect(analyser);\n    rafId = requestAnimationFrame(tick);\n    console.log(\"function has been called\");\n  }\n\n  function tick() {\n    analyser.getByteTimeDomainData(dataArray);\n    setAudioData(dataArray);\n    rafId = requestAnimationFrame(tick);\n  }\n\n  function componentWillUnmount() {\n    cancelAnimationFrame(rafId);\n    analyser.disconnect();\n    source.disconnect();\n  }\n\n  componentWillUnmount();\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"FnaEPm9gsXQIiFxPQkfdswZaTyY=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useState","AudioVisualiser","AudioAnalyser","audio","audioData","setAudioData","Uint8Array","audioContext","window","AudioContext","webkitAudioContext","analyser","dataArray","source","rafId","componentDidMount","createAnalyser","frequencyBinCount","createMediaStreamSource","connect","requestAnimationFrame","tick","console","log","getByteTimeDomainData","componentWillUnmount","cancelAnimationFrame","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAEjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,CAAe,CAAf,CAAD,CAA1C;AAEA,MAAIC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAnB;AACA,MAAIC,QAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;;AAEA,WAASC,iBAAT,GAA6B;AAEzBJ,IAAAA,QAAQ,GAAGJ,YAAY,CAACS,cAAb,EAAX;AACAJ,IAAAA,SAAS,GAAG,IAAIN,UAAJ,CAAeK,QAAQ,CAACM,iBAAxB,CAAZ;AACAJ,IAAAA,MAAM,GAAGN,YAAY,CAACW,uBAAb,CAAqCf,KAArC,CAAT;AACAU,IAAAA,MAAM,CAACM,OAAP,CAAeR,QAAf;AACAG,IAAAA,KAAK,GAAGM,qBAAqB,CAACC,IAAD,CAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AAGG,WAASF,IAAT,GAAe;AACXV,IAAAA,QAAQ,CAACa,qBAAT,CAA+BZ,SAA/B;AACAP,IAAAA,YAAY,CAACO,SAAD,CAAZ;AACAE,IAAAA,KAAK,GAAGM,qBAAqB,CAACC,IAAD,CAA7B;AACH;;AAGL,WAASI,oBAAT,GAAgC;AAC5BC,IAAAA,oBAAoB,CAACZ,KAAD,CAApB;AACAH,IAAAA,QAAQ,CAACgB,UAAT;AACAd,IAAAA,MAAM,CAACc,UAAP;AACH;;AAEDF,EAAAA,oBAAoB;AAEpB,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAErB;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAxCD;;GAAMF,a;;KAAAA,a;AA0CN,eAAeA,aAAf","sourcesContent":["import React, {useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audio }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0));\n\n    let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser\n    let dataArray;\n    let source;\n    let rafId;\n\n    function componentDidMount() {\n        \n        analyser = audioContext.createAnalyser();\n        dataArray = new Uint8Array(analyser.frequencyBinCount) ;\n        source = audioContext.createMediaStreamSource(audio);\n        source.connect(analyser);\n        rafId = requestAnimationFrame(tick);\n        console.log(\"function has been called\")\n    }\n\n    \n        function tick(){\n            analyser.getByteTimeDomainData(dataArray);\n            setAudioData(dataArray)\n            rafId = requestAnimationFrame(tick);\n        }\n\n\n    function componentWillUnmount() {\n        cancelAnimationFrame(rafId);\n        analyser.disconnect();\n        source.disconnect();\n    }\n\n    componentWillUnmount()\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}