{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/WaveformVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WaveformVisualiser = ({\n  audioData,\n  setAnalyserDisconnected,\n  analyserDisconnected\n}) => {\n  _s();\n\n  const canvasRef = useRef(); //clear the canvas every 30 seconds\n  // useEffect(() => {\n  //     const clearCanvas = () => {\n  //         context.clearRect(0, 0, width, height);\n  //     }\n  //     setInterval(clearCanvas, 30000)\n  // },[])\n\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d'); // let x = 0;\n    // let sliceWidth = (width * 0.5) / audioData.length;\n    // let randomColour = \"#\" + ((1<<24)*Math.random() | 0).toString(16)\n    // if the analyser has been disconnected clear the canvas and reset analyserDisconnected to false\n\n    if (analyserDisconnected) {\n      context.clearRect(0, 0, width, height);\n      setAnalyserDisconnected(false);\n    } // const renderWaveform = () => {\n    //     context.lineWidth = 2;\n    //     context.strokeStyle = randomColour;\n    //     // when not clearingRect waveform displays\n    //     context.beginPath();\n    //     context.moveTo(0, height / 2);\n    //     for(const item of audioData) {\n    //         const y = (item / 255.0) * height;\n    //         context.lineTo(x, y);\n    //         x += sliceWidth;\n    //     }\n    //     context.lineTo(x, height / 2);\n    //     context.stroke();\n    // }\n    // renderWaveform()\n\n\n    let canvasData = context.getImageData(0, 0, width, height);\n    let fractalWidth = 3.5;\n    let fractalHeight = 2;\n    let xoffset = 0;\n    let yoffset = 0;\n    let px;\n    let py;\n\n    for (px = 0; px < width; px++) {\n      for (py = 0; py < height; py++) {\n        let x0 = px / width * width + (xoffset - 2.5);\n        let y0 = py / height * height + (yoffset - 1);\n        let x = 0;\n        let y = 0;\n        let iter = 0;\n        let max_iter = 128;\n\n        while (x * x + y * y < 4 && iter < max_iter) {\n          let x_temp = x * x - y * y + x0;\n          y = 2 * x * y + y0;\n          x = x_temp;\n          iter++;\n        }\n\n        var rgb = hToRgb(iter / max_iter);\n        drawPixel(px, py, rgb[0], rgb[1], rgb[2], 255);\n      }\n    }\n\n    context.putImageData(canvasData, 0, 0);\n\n    function drawPixel(x, y, r, g, b, a) {\n      let index = (x + y * width) * 4;\n      canvasData.data[index + 0] = r;\n      canvasData.data[index + 1] = g;\n      canvasData.data[index + 2] = b;\n      canvasData.data;\n    }\n  }, [audioData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas\",\n    width: \"3072\",\n    height: \"900\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WaveformVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = WaveformVisualiser;\nexport default WaveformVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"WaveformVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/WaveformVisualiser.js"],"names":["React","useRef","useEffect","WaveformVisualiser","audioData","setAnalyserDisconnected","analyserDisconnected","canvasRef","canvas","current","height","width","context","getContext","clearRect","canvasData","getImageData","fractalWidth","fractalHeight","xoffset","yoffset","px","py","x0","y0","x","y","iter","max_iter","x_temp","rgb","hToRgb","drawPixel","putImageData","r","g","b","a","index","data"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst WaveformVisualiser = ({audioData, setAnalyserDisconnected, analyserDisconnected}) => {\n\n    const canvasRef = useRef();\n    \n    //clear the canvas every 30 seconds\n    // useEffect(() => {\n        \n    //     const clearCanvas = () => {\n    //         context.clearRect(0, 0, width, height);\n    //     }\n    //     setInterval(clearCanvas, 30000)\n\n    // },[])\n\n    useEffect(() => {\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n        // let x = 0;\n        // let sliceWidth = (width * 0.5) / audioData.length;\n        // let randomColour = \"#\" + ((1<<24)*Math.random() | 0).toString(16)\n        \n        // if the analyser has been disconnected clear the canvas and reset analyserDisconnected to false\n        if(analyserDisconnected){\n            context.clearRect(0, 0, width, height);\n            setAnalyserDisconnected(false)\n        }\n        \n\n        // const renderWaveform = () => {\n        //     context.lineWidth = 2;\n        //     context.strokeStyle = randomColour;\n        //     // when not clearingRect waveform displays\n            \n        //     context.beginPath();\n        //     context.moveTo(0, height / 2);\n\n        //     for(const item of audioData) {\n        //         const y = (item / 255.0) * height;\n        //         context.lineTo(x, y);\n        //         x += sliceWidth;\n        //     }\n\n        //     context.lineTo(x, height / 2);\n        //     context.stroke();\n            \n        // }\n        \n        // renderWaveform()\n\n        let canvasData = context.getImageData(0, 0, width, height)\n\n        let fractalWidth = 3.5; \n        let fractalHeight = 2;\n        let xoffset=0; \n        let yoffset=0;\n        let px;\n        let py;\n\n        for (px=0; px < width; px++){\n            for (py=0; py < height; py++){\n\n                let x0 = (px / width) * width + (xoffset - 2.5);\n                let y0 = (py / height) * height + (yoffset - 1);\n                let x = 0;\n                let y = 0;\n                let iter = 0;\n                let max_iter = 128;\n\n                while ((x*x + y*y) < 4 && iter < max_iter){\n                    let x_temp = x*x - y*y + x0;\n                    y = 2*x*y + y0;\n                    x = x_temp;\n                    iter++;\n                }\n\n                var rgb = hToRgb(iter/max_iter);\n                drawPixel(px, py, rgb[0], rgb[1], rgb[2], 255);\n            } \n        }\n        context.putImageData(canvasData, 0, 0)\n\n        function drawPixel(x, y, r, g, b, a) {\n            let index = (x + y * width) * 4;\n\n            canvasData.data[index + 0] = r;\n            canvasData.data[index + 1] = g;\n            canvasData.data[index + 2] = b;\n            canvasData.data\n        }\n        \n\n    }, [audioData])\n\n    return(\n        <canvas \n            className=\"canvas\"\n            width=\"3072\" \n            height=\"900\" \n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default WaveformVisualiser;"]},"metadata":{},"sourceType":"module"}