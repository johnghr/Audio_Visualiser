{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audioContextSource,\n  audioContext\n}) => {\n  _s();\n\n  const [dataArray, setDataArray] = useState(new Uint8Array());\n  const [audioData, setAudioData] = useState(new Uint8Array());\n  let analyser = audioContext.createAnalyser();\n  useEffect(() => {\n    // sets audio data to be a Uint8Array which is half as long as the analyser fftSize:\n    // determines the amount of data values available for visualisation\n    setDataArray(new Uint8Array(analyser.frequencyBinCount)); // connect the audio analyser to the source of audio\n\n    audioContextSource.connect(analyser); // set the request animation frame Id for use when app dismounts/cancels and calls \n    // tick\n\n    let rafId = requestAnimationFrame(tick);\n    return () => {\n      cancelAnimationFrame(rafId);\n    };\n  }, []);\n\n  let tick = () => {\n    // copies wave form data into the dataArray which is passed in as an argument   \n    setDataArray(analyser.getByteTimeDomainData(dataArray));\n    console.log(\"audio data:\", dataArray); // set AudioData to be data contained in dataArray so it can be passed down to\n    // visualiser as a prop\n\n    setAudioData(dataArray);\n    let rafId = requestAnimationFrame(tick);\n    ra;\n  }; // function componentWillUnmount() {\n  //     cancelAnimationFrame(rafId);\n  //     analyser.disconnect();\n  //     source.disconnect();\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"F9c9esLqbLR5K8+4/SN+kcPx1Qw=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","audioContextSource","audioContext","dataArray","setDataArray","Uint8Array","audioData","setAudioData","analyser","createAnalyser","frequencyBinCount","connect","rafId","requestAnimationFrame","tick","cancelAnimationFrame","getByteTimeDomainData","console","log","ra"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,CAAD,KAA0C;AAAA;;AAE5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAIO,UAAJ,EAAD,CAA1C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAIO,UAAJ,EAAD,CAA1C;AAEA,MAAIG,QAAQ,GAAGN,YAAY,CAACO,cAAb,EAAf;AAGAZ,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACAO,IAAAA,YAAY,CAAC,IAAIC,UAAJ,CAAeG,QAAQ,CAACE,iBAAxB,CAAD,CAAZ,CAHa,CAIb;;AACAT,IAAAA,kBAAkB,CAACU,OAAnB,CAA2BH,QAA3B,EALa,CAMb;AACA;;AACA,QAAII,KAAK,GAAGC,qBAAqB,CAACC,IAAD,CAAjC;AAEA,WAAO,MAAM;AACTC,MAAAA,oBAAoB,CAACH,KAAD,CAApB;AACH,KAFD;AAIH,GAdQ,EAcN,EAdM,CAAT;;AAiBA,MAAIE,IAAI,GAAG,MAAM;AACb;AACAV,IAAAA,YAAY,CAACI,QAAQ,CAACQ,qBAAT,CAA+Bb,SAA/B,CAAD,CAAZ;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0Bf,SAA1B,EAHa,CAIb;AACA;;AACAI,IAAAA,YAAY,CAACJ,SAAD,CAAZ;AACA,QAAIS,KAAK,GAAGC,qBAAqB,CAACC,IAAD,CAAjC;AACAK,IAAAA,EAAE;AACL,GATD,CAzB4D,CAqC5D;AACA;AACA;AACA;AACA;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEb;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CA/CD;;GAAMN,a;;KAAAA,a;AAiDN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audioContextSource, audioContext }) => {\n\n    const [dataArray, setDataArray] = useState(new Uint8Array());\n    const [audioData, setAudioData] = useState(new Uint8Array());\n\n    let analyser = audioContext.createAnalyser();\n    \n    \n    useEffect( () => {\n        // sets audio data to be a Uint8Array which is half as long as the analyser fftSize:\n        // determines the amount of data values available for visualisation\n        setDataArray(new Uint8Array(analyser.frequencyBinCount)) ;\n        // connect the audio analyser to the source of audio\n        audioContextSource.connect(analyser);\n        // set the request animation frame Id for use when app dismounts/cancels and calls \n        // tick\n        let rafId = requestAnimationFrame(tick);\n        \n        return () => {\n            cancelAnimationFrame(rafId)\n        }\n\n    }, [])\n\n    \n    let tick = () => {\n        // copies wave form data into the dataArray which is passed in as an argument   \n        setDataArray(analyser.getByteTimeDomainData(dataArray));\n        console.log(\"audio data:\",dataArray)\n        // set AudioData to be data contained in dataArray so it can be passed down to\n        // visualiser as a prop\n        setAudioData(dataArray);\n        let rafId = requestAnimationFrame(tick);\n        ra\n    }\n\n\n    // function componentWillUnmount() {\n    //     cancelAnimationFrame(rafId);\n    //     analyser.disconnect();\n    //     source.disconnect();\n    // }\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}