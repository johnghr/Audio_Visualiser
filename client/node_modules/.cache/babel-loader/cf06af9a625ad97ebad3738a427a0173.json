{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({\n  audioData,\n  analyser\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    analyser.fftSize = 256;\n    let bufferLength = analyser.frequencyBinCount;\n    console.log(bufferLength);\n    let dataArray = new Uint8Array(bufferLength);\n    context.clearRect(0, 0, height, width);\n\n    const render = () => {\n      analyser.getByteFre;\n    };\n  }, []);\n};\n\n_s(FrequencyVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = FrequencyVisualiser;\nexport default FrequencyVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js"],"names":["React","useRef","useEffect","FrequencyVisualiser","audioData","analyser","canvasRef","canvas","current","height","width","context","getContext","fftSize","bufferLength","frequencyBinCount","console","log","dataArray","Uint8Array","clearRect","render","getByteFre"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;AACA;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAAA;;AAErD,QAAMC,SAAS,GAAGL,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIK,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AAEAP,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,GAAnB;AACA,QAAIC,YAAY,GAAGT,QAAQ,CAACU,iBAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,QAAII,SAAS,GAAI,IAAIC,UAAJ,CAAeL,YAAf,CAAjB;AAEAH,IAAAA,OAAO,CAACS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBX,MAAxB,EAAgCC,KAAhC;;AAEA,UAAMW,MAAM,GAAG,MAAM;AACjBhB,MAAAA,QAAQ,CAACiB,UAAT;AACH,KAFD;AAIH,GAlBQ,EAkBN,EAlBM,CAAT;AAoBH,CAxBD;;GAAMnB,mB;;KAAAA,mB;AA0BN,eAAeA,mBAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({ audioData, analyser }) => {\n\n    const canvasRef = useRef();\n    \n    useEffect(() => {\n\n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n\n        analyser.fftSize = 256;\n        let bufferLength = analyser.frequencyBinCount;\n        console.log(bufferLength);\n        let dataArray =  new Uint8Array(bufferLength);\n\n        context.clearRect(0, 0, height, width);\n\n        const render = () => {\n            analyser.getByteFre\n        }\n\n    }, []);\n\n}\n\nexport default FrequencyVisualiser;"]},"metadata":{},"sourceType":"module"}