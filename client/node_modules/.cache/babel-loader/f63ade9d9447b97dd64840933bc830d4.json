{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AudioAnalyser from './components/Analysers/AudioAnalyser';\nimport { tracks } from './components/AudioPlayer/tracks';\nimport AudioPlayer from './components/AudioPlayer/AudioPlayer';\nimport './App.css'; //your da sells the avon\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //mode can be 'off', 'track' or 'microphone'\n  const initialAnalyserState = {\n    input: null,\n    mode: 'off'\n  };\n  const [analyserState, setAnalyserState] = useState(initialAnalyserState);\n\n  const resetAnalyser = () => setAnalyserState(initialAnalyserState);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function stopTrack() {\n    console.log(\"input\", analyserState.input);\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function toggleMicrophone() {\n    if (analyserState.mode === 'microphone') {\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  function toggleTrack(track) {\n    if (analyserState.mode === 'track') {\n      stopTrack();\n    } else {\n      setAnalyserState({\n        input: track,\n        mode: \"track\"\n      });\n    }\n  }\n\n  const onChangeTrack = track => {\n    console.log('on change track', track); // setAnalyserState({\n    //   input: track,\n    //   mode: \"track\"\n    // })\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMicrophone,\n        children: analyserState.mode === 'microphone' ? 'Stop microphone' : 'Get microphone'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), analyserState.input ? /*#__PURE__*/_jsxDEV(AudioAnalyser, {\n      input: analyserState.input,\n      mode: analyserState.mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 30\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      tracks: tracks,\n      onChangeTrack: onChangeTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cxq9jvmU1PvzaguCCR1pzcyye+w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/App.js"],"names":["React","useState","AudioAnalyser","tracks","AudioPlayer","App","initialAnalyserState","input","mode","analyserState","setAnalyserState","resetAnalyser","getMicrophone","micAudio","navigator","mediaDevices","getUserMedia","audio","video","stopMicrophone","getTracks","forEach","track","stop","stopTrack","console","log","toggleMicrophone","toggleTrack","onChangeTrack"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport AudioAnalyser from './components/Analysers/AudioAnalyser';\nimport {tracks} from './components/AudioPlayer/tracks'\nimport AudioPlayer from './components/AudioPlayer/AudioPlayer'\nimport './App.css';\n\n\n//your da sells the avon\nfunction App() {\n  //mode can be 'off', 'track' or 'microphone'\n  const initialAnalyserState = {input: null, mode: 'off'};\n  const[analyserState, setAnalyserState] = useState(initialAnalyserState);\n\n  const resetAnalyser = () => setAnalyserState(initialAnalyserState);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia(\n      {\n        audio: true,\n        video: false\n      }\n    )\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function stopTrack() {\n    console.log(\"input\",analyserState.input)\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function toggleMicrophone() {\n    if (analyserState.mode  === 'microphone'){\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  function toggleTrack(track) {\n    if (analyserState.mode  === 'track'){\n      stopTrack();\n    } else {\n      setAnalyserState({\n        input: track,\n        mode: \"track\"\n      });\n    }\n  }\n\n  const onChangeTrack = (track) => {\n    console.log('on change track', track);\n    // setAnalyserState({\n    //   input: track,\n    //   mode: \"track\"\n    // })\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"controls\">\n        \n        <button onClick={toggleMicrophone}>\n          {analyserState.mode === 'microphone' ? 'Stop microphone' : 'Get microphone'}\n        </button>\n\n      </div>\n\n      {analyserState.input ? <AudioAnalyser input={analyserState.input} mode={analyserState.mode}/> : \"\"}\n\n      <AudioPlayer tracks={tracks}onChangeTrack={onChangeTrack}></AudioPlayer>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}