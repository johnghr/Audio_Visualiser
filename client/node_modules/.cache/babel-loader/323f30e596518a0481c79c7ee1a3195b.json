{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FrequencyVisualiser = ({\n  audioData\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    audioData.fftSize = 256; //bufferLength equals half the fftSize i.e. 128\n\n    let bufferLength = audioData.frequencyBinCount;\n    console.log(\"buffer length\", bufferLength);\n    let dataArray = new Uint8Array(bufferLength);\n    context.clearRect(0, 0, width, height);\n\n    const render = () => {\n      context.fillStyle = 'rgb(0, 0 , 0)';\n      context.fillRect(0, 0, width, height);\n      let barWidth = width / bufferLength * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        // the height of a bar equals the current audio sample value halved\n        barHeight = audioData[i] / 2;\n        context.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';\n        context.fillRect(x, height - barHeight / 2, barWidth, barHeight);\n        x;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas\",\n    width: \"1024\",\n    height: \"1024\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FrequencyVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = FrequencyVisualiser;\nexport default FrequencyVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js"],"names":["React","useRef","useEffect","FrequencyVisualiser","audioData","canvasRef","canvas","current","height","width","context","getContext","fftSize","bufferLength","frequencyBinCount","console","log","dataArray","Uint8Array","clearRect","render","fillStyle","fillRect","barWidth","barHeight","x","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;AACA;;;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AAEzC,QAAMC,SAAS,GAAGJ,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAII,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AAEAP,IAAAA,SAAS,CAACQ,OAAV,GAAoB,GAApB,CAPY,CAQZ;;AACA,QAAIC,YAAY,GAAGT,SAAS,CAACU,iBAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BH,YAA5B;AACA,QAAII,SAAS,GAAG,IAAIC,UAAJ,CAAeL,YAAf,CAAhB;AAEAH,IAAAA,OAAO,CAACS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBV,KAAxB,EAA+BD,MAA/B;;AAEA,UAAMY,MAAM,GAAG,MAAM;AACjBV,MAAAA,OAAO,CAACW,SAAR,GAAoB,eAApB;AACAX,MAAAA,OAAO,CAACY,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAwBb,KAAxB,EAA+BD,MAA/B;AAEA,UAAIe,QAAQ,GAAId,KAAK,GAAGI,YAAT,GAAyB,GAAxC;AACA,UAAIW,SAAJ;AACA,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGb,YAAnB,EAAiCa,CAAC,EAAlC,EAAsC;AAClC;AACAF,QAAAA,SAAS,GAAGpB,SAAS,CAACsB,CAAD,CAAT,GAAe,CAA3B;AAEAhB,QAAAA,OAAO,CAACW,SAAR,GAAoB,UAAUG,SAAS,GAAC,GAApB,IAA2B,SAA/C;AACAd,QAAAA,OAAO,CAACY,QAAR,CAAiBG,CAAjB,EAAoBjB,MAAM,GAAGgB,SAAS,GAAG,CAAzC,EAA4CD,QAA5C,EAAsDC,SAAtD;AAEAC,QAAAA,CAAC;AACJ;AACJ,KAjBD;AAmBH,GAlCQ,EAkCN,EAlCM,CAAT;AAoCA,sBACI;AACI,IAAA,SAAS,EAAC,QADd;AAEI,IAAA,KAAK,EAAC,MAFV;AAGI,IAAA,MAAM,EAAC,MAHX;AAII,IAAA,GAAG,EAAEpB;AAJT;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAjDD;;GAAMF,mB;;KAAAA,mB;AAmDN,eAAeA,mBAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({audioData}) => {\n\n    const canvasRef = useRef();\n    \n    useEffect(() => {\n        \n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n\n        audioData.fftSize = 256;\n        //bufferLength equals half the fftSize i.e. 128\n        let bufferLength = audioData.frequencyBinCount;\n        console.log(\"buffer length\",bufferLength);\n        let dataArray = new Uint8Array(bufferLength);\n\n        context.clearRect(0, 0, width, height);\n\n        const render = () => {\n            context.fillStyle = 'rgb(0, 0 , 0)';\n            context.fillRect(0, 0 , width, height);\n\n            let barWidth = (width / bufferLength) * 2.5;\n            let barHeight;\n            let x = 0;\n\n            for(var i = 0; i < bufferLength; i++) {\n                // the height of a bar equals the current audio sample value halved\n                barHeight = audioData[i] / 2;\n\n                context.fillStyle = 'rgb(' + (barHeight+100) + ',50,50)';\n                context.fillRect(x, height - barHeight / 2, barWidth, barHeight)\n\n                x \n            }\n        }\n\n    }, []);\n\n    return(\n        <canvas \n            className=\"canvas\"\n            width=\"1024\" \n            height=\"1024\" \n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default FrequencyVisualiser; "]},"metadata":{},"sourceType":"module"}