{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport FrequencyVisualiser from '../Visualisers/FrequencyVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  mode,\n  input\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\n  const audioContextRef = useRef(new (window.AudioContext || window.webkitAudioContext)());\n  const audioContext = audioContextRef.current;\n  const sourceRef = useRef(null);\n  let source = sourceRef.current;\n  const analyserRef = useRef(audioContext.createAnalyser());\n  const analyser = analyserRef.current;\n  useEffect(() => {\n    console.log('analyser input', input); // empty request animation frame Id\n\n    let rafId; // creates an audio context\n    // Creates a data Array which is half the length of the fftSize;\n    // it takes in unsigned integers  \n\n    const dataArray = new Uint8Array(analyser.frequencyBinCount); // connects the audio stream to the analyser node\n\n    if (mode === \"track\") {\n      source = audioContext.createMediaElementSource(input);\n      source.connect(analyser).connect(audioContext.destination);\n    } else {\n      source = audioContext.createMediaStreamSource(input);\n      source.connect(analyser);\n    }\n\n    const tick = () => {\n      // copies wave form data into the dataArray which is passed in as an argument   \n      analyser.getByteTimeDomainData(dataArray); // sets audioData to be the value of a copy of dataArray\n\n      setAudioData([...dataArray]); // requests a re-render while calling tick in a recursive loop\n\n      rafId = requestAnimationFrame(tick);\n    };\n\n    rafId = requestAnimationFrame(tick);\n    return function cleanup() {\n      if (mode === \"track\") {\n        source.disconnect(analyser);\n      } else {\n        source.disconnect();\n      }\n\n      cancelAnimationFrame(rafId);\n      console.log('clean up on aisle 3');\n    };\n  }, [mode, input]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(WaveformVisualiser, {\n      audioData: audioData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"KmID+9m5xlmalAzHW9EtDDh3KPk=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/AudioAnalyser.js"],"names":["React","useEffect","useState","useRef","WaveformVisualiser","FrequencyVisualiser","AudioAnalyser","mode","input","audioData","setAudioData","Uint8Array","audioContextRef","window","AudioContext","webkitAudioContext","audioContext","current","sourceRef","source","analyserRef","createAnalyser","analyser","console","log","rafId","dataArray","frequencyBinCount","createMediaElementSource","connect","destination","createMediaStreamSource","tick","getByteTimeDomainData","requestAnimationFrame","cleanup","disconnect","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqB;AAAA;;AAEvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAIS,UAAJ,CAAe,CAAf,CAAD,CAA1C;AAEA,QAAMC,eAAe,GAAGT,MAAM,CAAC,KAAKU,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAD,CAA9B;AACA,QAAMC,YAAY,GAAGJ,eAAe,CAACK,OAArC;AACA,QAAMC,SAAS,GAAGf,MAAM,CAAC,IAAD,CAAxB;AACA,MAAIgB,MAAM,GAAGD,SAAS,CAACD,OAAvB;AACA,QAAMG,WAAW,GAAGjB,MAAM,CAACa,YAAY,CAACK,cAAb,EAAD,CAA1B;AACA,QAAMC,QAAQ,GAAGF,WAAW,CAACH,OAA7B;AAEAhB,EAAAA,SAAS,CAAE,MAAM;AACbsB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BhB,KAA9B,EADa,CAEb;;AACA,QAAIiB,KAAJ,CAHa,CAKb;AAEA;AACA;;AACA,UAAMC,SAAS,GAAG,IAAIf,UAAJ,CAAeW,QAAQ,CAACK,iBAAxB,CAAlB,CATa,CAUb;;AAEA,QAAGpB,IAAI,KAAK,OAAZ,EAAoB;AAChBY,MAAAA,MAAM,GAAGH,YAAY,CAACY,wBAAb,CAAsCpB,KAAtC,CAAT;AACAW,MAAAA,MAAM,CAACU,OAAP,CAAeP,QAAf,EAAyBO,OAAzB,CAAiCb,YAAY,CAACc,WAA9C;AACH,KAHD,MAIK;AACDX,MAAAA,MAAM,GAAGH,YAAY,CAACe,uBAAb,CAAqCvB,KAArC,CAAT;AACAW,MAAAA,MAAM,CAACU,OAAP,CAAeP,QAAf;AACH;;AAED,UAAMU,IAAI,GAAG,MAAM;AACf;AACAV,MAAAA,QAAQ,CAACW,qBAAT,CAA+BP,SAA/B,EAFe,CAGf;;AACAhB,MAAAA,YAAY,CAAC,CAAC,GAAGgB,SAAJ,CAAD,CAAZ,CAJe,CAKf;;AACAD,MAAAA,KAAK,GAAGS,qBAAqB,CAACF,IAAD,CAA7B;AACH,KAPD;;AASAP,IAAAA,KAAK,GAAGS,qBAAqB,CAACF,IAAD,CAA7B;AAEA,WAAO,SAASG,OAAT,GAAmB;AACtB,UAAG5B,IAAI,KAAK,OAAZ,EAAoB;AAChBY,QAAAA,MAAM,CAACiB,UAAP,CAAkBd,QAAlB;AACH,OAFD,MAEO;AACHH,QAAAA,MAAM,CAACiB,UAAP;AACH;;AACDC,MAAAA,oBAAoB,CAACZ,KAAD,CAApB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KARD;AAUH,GA1CQ,EA0CN,CAACjB,IAAD,EAAOC,KAAP,CA1CM,CAAT;AA4CA,sBACI;AAAA,2BACI,QAAC,kBAAD;AAAoB,MAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA/DD;;GAAMH,a;;KAAAA,a;AAiEN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState, useRef} from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport FrequencyVisualiser from '../Visualisers/FrequencyVisualiser';\n\nconst AudioAnalyser = ({ mode, input }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0));\n        \n    const audioContextRef = useRef(new (window.AudioContext || window.webkitAudioContext)());\n    const audioContext = audioContextRef.current;\n    const sourceRef = useRef(null);\n    let source = sourceRef.current;\n    const analyserRef = useRef(audioContext.createAnalyser())\n    const analyser = analyserRef.current;\n    \n    useEffect( () => {\n        console.log('analyser input', input)\n        // empty request animation frame Id\n        let rafId; \n        \n        // creates an audio context\n        \n        // Creates a data Array which is half the length of the fftSize;\n        // it takes in unsigned integers  \n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // connects the audio stream to the analyser node\n\n        if(mode === \"track\"){\n            source = audioContext.createMediaElementSource(input);\n            source.connect(analyser).connect(audioContext.destination);\n        } \n        else {\n            source = audioContext.createMediaStreamSource(input);\n            source.connect(analyser);\n        }\n        \n        const tick = () => {\n            // copies wave form data into the dataArray which is passed in as an argument   \n            analyser.getByteTimeDomainData(dataArray)\n            // sets audioData to be the value of a copy of dataArray\n            setAudioData([...dataArray])\n            // requests a re-render while calling tick in a recursive loop\n            rafId = requestAnimationFrame(tick);\n        }\n    \n        rafId = requestAnimationFrame(tick);\n\n        return function cleanup() {\n            if(mode === \"track\"){\n                source.disconnect(analyser);\n            } else {\n                source.disconnect()\n            }\n            cancelAnimationFrame(rafId);\n            console.log('clean up on aisle 3')   \n        }\n\n    }, [mode, input])\n\n    return(\n        <div>\n            <WaveformVisualiser audioData={audioData}/>\n            {/* <FrequencyVisualiser audioData={audioData} analyser={analyser}/>  */}\n        </div>\n        \n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}