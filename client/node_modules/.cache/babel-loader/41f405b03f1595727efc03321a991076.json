{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  souaudio\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array());\n  let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  let analyser = audioContext.createAnalyser();\n  let dataArray;\n  let source;\n  let rafId;\n  useEffect(() => {\n    dataArray = new Uint8Array(analyser.frequencyBinCount); //source = audioContext.createMediaStreamSource(audio);\n\n    source.connect(analyser);\n    rafId = requestAnimationFrame(tick);\n  }, []);\n\n  let tick = () => {\n    analyser.getByteTimeDomainData(dataArray);\n    setAudioData(dataArray);\n    rafId = requestAnimationFrame(tick);\n  }; // function componentWillUnmount() {\n  //     cancelAnimationFrame(rafId);\n  //     analyser.disconnect();\n  //     source.disconnect();\n  // }\n  // componentWillUnmount()\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"A9mH2REwVuk5Zr5YivScdT+42Ug=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","souaudio","audioData","setAudioData","Uint8Array","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","source","rafId","frequencyBinCount","connect","requestAnimationFrame","tick","getByteTimeDomainData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAEpC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,EAAD,CAA1C;AAEA,MAAIC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAnB;AACA,MAAIC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AACA,MAAIC,SAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;AAEAhB,EAAAA,SAAS,CAAE,MAAM;AACbc,IAAAA,SAAS,GAAG,IAAIP,UAAJ,CAAeK,QAAQ,CAACK,iBAAxB,CAAZ,CADa,CAEb;;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeN,QAAf;AACAI,IAAAA,KAAK,GAAGG,qBAAqB,CAACC,IAAD,CAA7B;AACH,GALQ,EAKN,EALM,CAAT;;AAQA,MAAIA,IAAI,GAAG,MAAM;AACbR,IAAAA,QAAQ,CAACS,qBAAT,CAA+BP,SAA/B;AACAR,IAAAA,YAAY,CAACQ,SAAD,CAAZ;AACAE,IAAAA,KAAK,GAAGG,qBAAqB,CAACC,IAAD,CAA7B;AACH,GAJD,CAlBoC,CAyBpC;AACA;AACA;AACA;AACA;AAEA;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEf;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CArCD;;GAAMF,a;;KAAAA,a;AAuCN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ souaudio }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array());\n\n    let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = audioContext.createAnalyser();\n    let dataArray;\n    let source;\n    let rafId;\n    \n    useEffect( () => {\n        dataArray = new Uint8Array(analyser.frequencyBinCount) ;\n        //source = audioContext.createMediaStreamSource(audio);\n        source.connect(analyser);\n        rafId = requestAnimationFrame(tick);\n    }, [])\n\n    \n    let tick = () => {   \n        analyser.getByteTimeDomainData(dataArray);\n        setAudioData(dataArray)\n        rafId = requestAnimationFrame(tick);\n    }\n\n\n    // function componentWillUnmount() {\n    //     cancelAnimationFrame(rafId);\n    //     analyser.disconnect();\n    //     source.disconnect();\n    // }\n\n    // componentWillUnmount()\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}