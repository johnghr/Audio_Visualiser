{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audioContextSource,\n  audioContext\n}) => {\n  _s();\n\n  // const [audioData, setAudioData] = useState(new Uint8Array());\n  // const [amplitudeArray, setAmplitudeArray] = useState(new Uint8Array())\n  const [dataArray, setDataArray] = useState(new Uint8Array());\n  const [rafId, setRafId] = useState(null);\n  let analyser = audioContext.createAnalyser();\n  useEffect(() => {\n    setAudioData(new Uint8Array(analyser.frequencyBinCount));\n    audioContextSource.connect(analyser);\n    setRafid(requestAnimationFrame(tick));\n  }, []);\n\n  let tick = () => {\n    analyser.getByteTimeDomainData(audioData); // console.log(audioData)\n\n    setAudioData(audioData);\n    let rafId = requestAnimationFrame(tick);\n  }; // function componentWillUnmount() {\n  //     cancelAnimationFrame(rafId);\n  //     analyser.disconnect();\n  //     source.disconnect();\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"0MZXTIlE0EjuVmCV5zg+aP0ym3M=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","audioContextSource","audioContext","dataArray","setDataArray","Uint8Array","rafId","setRafId","analyser","createAnalyser","setAudioData","frequencyBinCount","connect","setRafid","requestAnimationFrame","tick","getByteTimeDomainData","audioData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,CAAD,KAA0C;AAAA;;AAE5D;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAIO,UAAJ,EAAD,CAA1C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEA,MAAIU,QAAQ,GAAGN,YAAY,CAACO,cAAb,EAAf;AAEAZ,EAAAA,SAAS,CAAE,MAAM;AACba,IAAAA,YAAY,CAAC,IAAIL,UAAJ,CAAeG,QAAQ,CAACG,iBAAxB,CAAD,CAAZ;AACAV,IAAAA,kBAAkB,CAACW,OAAnB,CAA2BJ,QAA3B;AACAK,IAAAA,QAAQ,CAACC,qBAAqB,CAACC,IAAD,CAAtB,CAAR;AACH,GAJQ,EAIN,EAJM,CAAT;;AAOA,MAAIA,IAAI,GAAG,MAAM;AACbP,IAAAA,QAAQ,CAACQ,qBAAT,CAA+BC,SAA/B,EADa,CAEb;;AACAP,IAAAA,YAAY,CAACO,SAAD,CAAZ;AACA,QAAIX,KAAK,GAAGQ,qBAAqB,CAACC,IAAD,CAAjC;AACH,GALD,CAhB4D,CAwB5D;AACA;AACA;AACA;AACA;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEE;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAlCD;;GAAMjB,a;;KAAAA,a;AAoCN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audioContextSource, audioContext }) => {\n\n    // const [audioData, setAudioData] = useState(new Uint8Array());\n    // const [amplitudeArray, setAmplitudeArray] = useState(new Uint8Array())\n    const [dataArray, setDataArray] = useState(new Uint8Array())\n    const [rafId, setRafId] = useState(null)\n\n    let analyser = audioContext.createAnalyser();\n    \n    useEffect( () => {\n        setAudioData(new Uint8Array(analyser.frequencyBinCount)) ;\n        audioContextSource.connect(analyser);\n        setRafid(requestAnimationFrame(tick));\n    }, [])\n\n    \n    let tick = () => {   \n        analyser.getByteTimeDomainData(audioData);\n        // console.log(audioData)\n        setAudioData(audioData)\n        let rafId = requestAnimationFrame(tick);\n    }\n\n\n    // function componentWillUnmount() {\n    //     cancelAnimationFrame(rafId);\n    //     analyser.disconnect();\n    //     source.disconnect();\n    // }\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}