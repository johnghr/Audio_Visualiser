{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react'; //let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FrequencyVisualiser = ({\n  audioData,\n  analyser\n}) => {\n  _s();\n\n  const canvasRef = useRef();\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    let height = canvas.height;\n    let width = canvas.width;\n    let context = canvas.getContext('2d');\n    analyser.fftSize = 256; //bufferLength equals half the fftSize i.e. 128\n\n    let bufferLength = analyser.frequencyBinCount;\n    console.log(\"buffer length\", bufferLength); // let dataArray = new Uint8Array(bufferLength);\n\n    context.clearRect(0, 0, width, height);\n\n    const render = () => {\n      context.fillStyle = 'rgb(0, 0 , 0)';\n      context.fillRect(0, 0, width, height);\n      let barWidth = width / bufferLength * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        // the height of a bar equals the current audio sample value halved\n        barHeight = audioData[i] / 2;\n        context.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';\n        context.fillRect(x, height - barHeight / 2, barWidth, barHeight);\n        x += barWidth + 1;\n      }\n    };\n\n    render();\n  }, [audioData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"canvas\",\n    width: \"1024\",\n    height: \"1024\",\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FrequencyVisualiser, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = FrequencyVisualiser;\nexport default FrequencyVisualiser;\n\nvar _c;\n\n$RefreshReg$(_c, \"FrequencyVisualiser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Visualisers/FrequencyVisualiser.js"],"names":["React","useRef","useEffect","FrequencyVisualiser","audioData","analyser","canvasRef","canvas","current","height","width","context","getContext","fftSize","bufferLength","frequencyBinCount","console","log","clearRect","render","fillStyle","fillRect","barWidth","barHeight","x","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;AACA;;;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAAD,KAA2B;AAAA;;AAEnD,QAAMC,SAAS,GAAGL,MAAM,EAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIK,MAAM,GAAGD,SAAS,CAACE,OAAvB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,QAAIC,OAAO,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAd;AAEAP,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,GAAnB,CAPY,CAQZ;;AACA,QAAIC,YAAY,GAAGT,QAAQ,CAACU,iBAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BH,YAA5B,EAVY,CAWZ;;AAEAH,IAAAA,OAAO,CAACO,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBR,KAAxB,EAA+BD,MAA/B;;AAEA,UAAMU,MAAM,GAAG,MAAM;AACjBR,MAAAA,OAAO,CAACS,SAAR,GAAoB,eAApB;AACAT,MAAAA,OAAO,CAACU,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAwBX,KAAxB,EAA+BD,MAA/B;AAEA,UAAIa,QAAQ,GAAIZ,KAAK,GAAGI,YAAT,GAAyB,GAAxC;AACA,UAAIS,SAAJ;AACA,UAAIC,CAAC,GAAG,CAAR;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGX,YAAnB,EAAiCW,CAAC,EAAlC,EAAsC;AAClC;AACAF,QAAAA,SAAS,GAAGnB,SAAS,CAACqB,CAAD,CAAT,GAAe,CAA3B;AAEAd,QAAAA,OAAO,CAACS,SAAR,GAAoB,UAAUG,SAAS,GAAC,GAApB,IAA2B,SAA/C;AACAZ,QAAAA,OAAO,CAACU,QAAR,CAAiBG,CAAjB,EAAoBf,MAAM,GAAGc,SAAS,GAAG,CAAzC,EAA4CD,QAA5C,EAAsDC,SAAtD;AAEAC,QAAAA,CAAC,IAAIF,QAAQ,GAAG,CAAhB;AACH;AACJ,KAjBD;;AAmBAH,IAAAA,MAAM;AAET,GApCQ,EAoCN,CAACf,SAAD,CApCM,CAAT;AAsCA,sBACI;AACI,IAAA,SAAS,EAAC,QADd;AAEI,IAAA,KAAK,EAAC,MAFV;AAGI,IAAA,MAAM,EAAC,MAHX;AAII,IAAA,GAAG,EAAEE;AAJT;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAnDD;;GAAMH,mB;;KAAAA,mB;AAqDN,eAAeA,mBAAf","sourcesContent":["import React, {useRef, useEffect} from 'react';\n\n//let testWaveFormRef = useRef(Array.from({length: 1024}, () => Math.floor(Math.random() * 255)));\n//  const testWaveForm = testWaveFormRef.current;\n\nconst FrequencyVisualiser = ({audioData, analyser}) => {\n\n    const canvasRef = useRef();\n    \n    useEffect(() => {\n        \n        let canvas = canvasRef.current;\n        let height = canvas.height;\n        let width = canvas.width;\n        let context = canvas.getContext('2d');\n\n        analyser.fftSize = 256; \n        //bufferLength equals half the fftSize i.e. 128\n        let bufferLength = analyser.frequencyBinCount\n        console.log(\"buffer length\",bufferLength);\n        // let dataArray = new Uint8Array(bufferLength);\n\n        context.clearRect(0, 0, width, height);\n\n        const render = () => {\n            context.fillStyle = 'rgb(0, 0 , 0)';\n            context.fillRect(0, 0 , width, height);\n\n            let barWidth = (width / bufferLength) * 2.5;\n            let barHeight;\n            let x = 0;\n\n            for(var i = 0; i < bufferLength; i++) {\n                // the height of a bar equals the current audio sample value halved\n                barHeight = audioData[i] / 2;\n\n                context.fillStyle = 'rgb(' + (barHeight+100) + ',50,50)';\n                context.fillRect(x, height - barHeight / 2, barWidth, barHeight)\n\n                x += barWidth + 1;\n            }\n        };\n\n        render()\n\n    }, [audioData]);\n\n    return(\n        <canvas \n            className=\"canvas\"\n            width=\"1024\" \n            height=\"1024\" \n            ref={canvasRef}\n        />\n    )\n\n}\n\nexport default FrequencyVisualiser; "]},"metadata":{},"sourceType":"module"}