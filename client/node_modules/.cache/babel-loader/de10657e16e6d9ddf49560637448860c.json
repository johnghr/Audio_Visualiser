{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/MicrophoneAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MicAudioAnalyser = ({\n  microphoneInput\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\n  useEffect(() => {\n    // empty request animation frame Id\n    let rafId; // Creates a data Array which is half the length of the fftSize\n    // it takes in unsigned integers  \n\n    const dataArray = new Uint8Array(analyser.frequencyBinCount); // creates an audio context\n\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)(); // creates analyser node\n\n    const analyser = audioContext.createAnalyser();\n    console.log(\"\", analyser); // creates a source variable containing the media stream source\n\n    const source = audioContext.createMediaStreamSource(microphoneInput); // connects the audio stream to the analyser node\n\n    source.connect(analyser);\n\n    const tick = () => {\n      // copies wave form data into the dataArray which is passed in as an argument   \n      analyser.getByteTimeDomainData(dataArray); // sets audioData to be the value of a copy of dataArray\n\n      console.log(\"audio data:\", dataArray);\n      setAudioData([...dataArray]); // requests a re-render while calling tick in a recursive loop\n\n      rafId = requestAnimationFrame(tick);\n    };\n\n    rafId = requestAnimationFrame(tick);\n    return function cleanup() {\n      cancelAnimationFrame(rafId);\n    };\n  }, [microphoneInput]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(WaveformVisualiser, {\n      audioData: audioData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MicAudioAnalyser, \"vp759RvJ0/M2OESOZvwirEnYLkY=\");\n\n_c = MicAudioAnalyser;\nexport default MicAudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"MicAudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/MicrophoneAnalyser.js"],"names":["React","useEffect","useState","WaveformVisualiser","MicAudioAnalyser","microphoneInput","audioData","setAudioData","Uint8Array","rafId","dataArray","analyser","frequencyBinCount","audioContext","window","AudioContext","webkitAudioContext","createAnalyser","console","log","source","createMediaStreamSource","connect","tick","getByteTimeDomainData","requestAnimationFrame","cleanup","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;;;AAEC,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyB;AAAA;;AAE/C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,CAAe,CAAf,CAAD,CAA1C;AAGAP,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,QAAIQ,KAAJ,CAFa,CAGb;AACA;;AACA,UAAMC,SAAS,GAAG,IAAIF,UAAJ,CAAeG,QAAQ,CAACC,iBAAxB,CAAlB,CALa,CAMb;;AACA,UAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAArB,CAPa,CAQb;;AACA,UAAML,QAAQ,GAAGE,YAAY,CAACI,cAAb,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,EAAZ,EAAeR,QAAf,EAVa,CAWb;;AACA,UAAMS,MAAM,GAAGP,YAAY,CAACQ,uBAAb,CAAqChB,eAArC,CAAf,CAZa,CAab;;AACAe,IAAAA,MAAM,CAACE,OAAP,CAAeX,QAAf;;AAEA,UAAMY,IAAI,GAAG,MAAM;AACf;AACAZ,MAAAA,QAAQ,CAACa,qBAAT,CAA+Bd,SAA/B,EAFe,CAGf;;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BT,SAA1B;AACAH,MAAAA,YAAY,CAAC,CAAC,GAAGG,SAAJ,CAAD,CAAZ,CALe,CAMf;;AACAD,MAAAA,KAAK,GAAGgB,qBAAqB,CAACF,IAAD,CAA7B;AACH,KARD;;AAUAd,IAAAA,KAAK,GAAGgB,qBAAqB,CAACF,IAAD,CAA7B;AAEA,WAAO,SAASG,OAAT,GAAmB;AACtBC,MAAAA,oBAAoB,CAAClB,KAAD,CAApB;AACH,KAFD;AAIH,GAhCQ,EAgCN,CAACJ,eAAD,CAhCM,CAAT;AAkCA,sBACI;AAAA,2BACI,QAAC,kBAAD;AAAoB,MAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA/CA;;GAAMF,gB;;KAAAA,gB;AAiDP,eAAeA,gBAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\n\n const MicAudioAnalyser = ({ microphoneInput }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0));\n    \n\n    useEffect( () => {\n        // empty request animation frame Id\n        let rafId; \n        // Creates a data Array which is half the length of the fftSize\n        // it takes in unsigned integers  \n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // creates an audio context\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        // creates analyser node\n        const analyser = audioContext.createAnalyser();\n        console.log(\"\",analyser)\n        // creates a source variable containing the media stream source\n        const source = audioContext.createMediaStreamSource(microphoneInput)\n        // connects the audio stream to the analyser node\n        source.connect(analyser)\n\n        const tick = () => {\n            // copies wave form data into the dataArray which is passed in as an argument   \n            analyser.getByteTimeDomainData(dataArray)\n            // sets audioData to be the value of a copy of dataArray\n            console.log(\"audio data:\",dataArray)\n            setAudioData([...dataArray])\n            // requests a re-render while calling tick in a recursive loop\n            rafId = requestAnimationFrame(tick);\n        }\n    \n        rafId = requestAnimationFrame(tick);\n\n        return function cleanup() {\n            cancelAnimationFrame(rafId);\n        }\n\n    }, [microphoneInput])\n\n    return(\n        <div>\n            <WaveformVisualiser audioData={audioData}/>\n            {/* <FrequencyVisualiser audioData={audioData} analyser={analyser}/>  */}\n        </div>\n        \n    )\n\n}\n\nexport default MicAudioAnalyser;"]},"metadata":{},"sourceType":"module"}