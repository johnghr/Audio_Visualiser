{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioPlayer/AudioPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport AudioControls from './AudioControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = ({\n  tracks,\n  toggleTrack\n}) => {\n  _s();\n\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const {\n    title,\n    audioSrc\n  } = tracks[trackIndex];\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n\n  const toPreviousTrack = () => {\n    console.log('TODO go to previous track');\n  };\n\n  const toNextTrack = () => {\n    console.group('TODO go to next track');\n  };\n\n  const handlePlay = event => {\n    const eventTarget = event.target;\n    console.log(\"eventTarget\", event);\n    toggleTrack(eventTarget);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioPlayer, \"9WgxzKDYZ0cxNar44T9ssqNs/bE=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioPlayer/AudioPlayer.js"],"names":["React","useState","useEffect","useRef","AudioControls","AudioPlayer","tracks","toggleTrack","trackIndex","setTrackIndex","trackProgress","setTrackProgress","isPlaying","setIsPlaying","title","audioSrc","audioRef","Audio","intervalRef","isReady","duration","current","toPreviousTrack","console","log","toNextTrack","group","handlePlay","event","eventTarget","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA6B;AAAA;;AAE7C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAACa,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBT,MAAM,CAACE,UAAD,CAAhC;AAEA,QAAMQ,QAAQ,GAAGb,MAAM,CAAC,IAAIc,KAAJ,CAAUF,QAAV,CAAD,CAAvB;AACA,QAAMG,WAAW,GAAGf,MAAM,EAA1B;AACA,QAAMgB,OAAO,GAAGhB,MAAM,CAAC,KAAD,CAAtB;AAEA,QAAM;AAAEiB,IAAAA;AAAF,MAAeJ,QAAQ,CAACK,OAA9B;;AAEA,QAAMC,eAAe,GAAG,MAAM;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtBF,IAAAA,OAAO,CAACG,KAAR,CAAc,uBAAd;AACH,GAFD;;AAIA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AACtB,UAAMC,WAAW,GAAGD,KAAK,CAACE,MAA1B;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BI,KAA3B;AACArB,IAAAA,WAAW,CAACsB,WAAD,CAAX;AACP,GAJD;;AAMA,sBAEI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA,kBAAuBf;AAAvB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAYH,CAvCD;;GAAMT,W;;KAAAA,W;AAyCN,eAAeA,WAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport AudioControls from './AudioControls'\n\nconst AudioPlayer = ({ tracks, toggleTrack }) => {\n\n    const [trackIndex, setTrackIndex] = useState(0);\n    const [trackProgress, setTrackProgress] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false)\n    const {title, audioSrc} = tracks[trackIndex]\n    \n    const audioRef = useRef(new Audio(audioSrc));\n    const intervalRef = useRef();\n    const isReady = useRef(false);\n\n    const { duration } = audioRef.current;\n\n    const toPreviousTrack = () => {\n        console.log('TODO go to previous track')\n    }\n\n    const toNextTrack = () => {\n        console.group('TODO go to next track')\n    }\n\n    const handlePlay = (event) => {\n            const eventTarget = event.target;\n            console.log(\"eventTarget\", event)\n            toggleTrack(eventTarget);\n    }    \n\n    return(\n        \n        <div className=\"audio-player\">\n            <div className=\"track-info\">\n                <h3 className=\"title\">{title}</h3>\n                \n            </div>\n        </div>\n\n    ) \n            \n\n}\n\nexport default AudioPlayer;"]},"metadata":{},"sourceType":"module"}