{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/containers/MediaPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AudioAnalyser from '../components/Analysers/AudioAnalyser';\nimport { tracks } from '../components/AudioPlayer/tracks';\nimport AudioPlayer from '../components/AudioPlayer/AudioPlayer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MediaPlayer() {\n  _s();\n\n  // state to be passed down for analyser: track or mic input and mode:'track', 'mic' and off\n  const initialAnalyserState = {\n    input: null,\n    mode: 'off'\n  };\n  const [analyserState, setAnalyserState] = useState(initialAnalyserState);\n  const [background, setBackground] = useState(\"Clear\");\n  const [visualiserType, setVisualiserType] = useState(\"Waveform\");\n\n  const resetAnalyser = () => setAnalyserState(initialAnalyserState);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function onPauseTrack() {\n    console.log(\"onPauseTrack hit\");\n    resetAnalyser();\n  }\n\n  function toggleMicrophone() {\n    if (analyserState.mode === 'microphone') {\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  const onChangeTrack = track => {\n    console.log('on change track', track);\n    setAnalyserState({\n      input: track,\n      mode: \"track\"\n    });\n  };\n\n  const toggleVisualiser = () => {\n    setVisualiserType(visualiserType === \"Waveform\" ? \"Frequency\" : \"Waveform\");\n  };\n\n  const toggleBackground = () => {\n    setBackground(background === \"Clear\" ? \"Black\" : \"Clear\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMicrophone,\n        children: analyserState.mode === 'microphone' ? 'Stop microphone' : 'Get microphone'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisualiser,\n        children: visualiserType === \"Waveform\" ? \"Frequency\" : \"Waveform\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleBackground,\n        children: background === \"Clear\" ? \"Black\" : \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), analyserState.input && /*#__PURE__*/_jsxDEV(AudioAnalyser, {\n      input: analyserState.input,\n      mode: analyserState.mode,\n      visualiserType: visualiserType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      tracks: tracks,\n      onChangeTrack: onChangeTrack,\n      onPauseTrack: onPauseTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MediaPlayer, \"0HE4MX9mCQWfEHh94f2nBd0pTJM=\");\n\n_c = MediaPlayer;\nexport default MediaPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MediaPlayer\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/client/src/containers/MediaPlayer.jsx"],"names":["React","useState","AudioAnalyser","tracks","AudioPlayer","MediaPlayer","initialAnalyserState","input","mode","analyserState","setAnalyserState","background","setBackground","visualiserType","setVisualiserType","resetAnalyser","getMicrophone","micAudio","navigator","mediaDevices","getUserMedia","audio","video","stopMicrophone","getTracks","forEach","track","stop","onPauseTrack","console","log","toggleMicrophone","onChangeTrack","toggleVisualiser","toggleBackground"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport AudioAnalyser from '../components/Analysers/AudioAnalyser';\nimport {tracks} from '../components/AudioPlayer/tracks'\nimport AudioPlayer from '../components/AudioPlayer/AudioPlayer'\n\nfunction MediaPlayer() {\n  // state to be passed down for analyser: track or mic input and mode:'track', 'mic' and off\n  const initialAnalyserState = {input: null, mode: 'off'};\n  const[analyserState, setAnalyserState] = useState(initialAnalyserState);\n  const[background, setBackground] = useState(\"Clear\")\n  const[visualiserType, setVisualiserType] = useState(\"Waveform\")\n\n  const resetAnalyser = () => setAnalyserState(initialAnalyserState);\n\n  async function getMicrophone() {\n    let micAudio = await navigator.mediaDevices.getUserMedia(\n      {\n        audio: true,\n        video: false\n      }\n    )\n    setAnalyserState({\n      input: micAudio,\n      mode: \"microphone\"\n    });\n  }\n\n  function stopMicrophone() {\n    analyserState.input.getTracks().forEach(track => track.stop());\n    resetAnalyser();\n  }\n\n  function onPauseTrack() {\n    console.log(\"onPauseTrack hit\")\n    resetAnalyser();\n  }\n\n  function toggleMicrophone() {\n    if (analyserState.mode  === 'microphone'){\n      stopMicrophone();\n    } else {\n      getMicrophone();\n    }\n  }\n\n  const onChangeTrack = (track) => {\n    console.log('on change track', track);\n    setAnalyserState({\n      input: track,\n      mode: \"track\"\n    })\n  }\n\n  const toggleVisualiser = () => {\n    setVisualiserType(visualiserType === \"Waveform\" ? \"Frequency\" : \"Waveform\");\n  }\n\n  const toggleBackground = () => {\n    setBackground(background === \"Clear\" ? \"Black\" : \"Clear\")\n  }\n  \n  return (\n    <div className=\"App\">\n      \n      <div className=\"controls\">\n        \n        <button onClick={toggleMicrophone}>\n          {analyserState.mode === 'microphone' ? 'Stop microphone' : 'Get microphone'}\n        </button>\n\n        <button onClick={toggleVisualiser}>\n          {visualiserType === \"Waveform\" ? \"Frequency\" : \"Waveform\"}\n        </button>\n\n        <button onClick={toggleBackground}>\n          {background === \"Clear\" ? \"Black\" : \"Clear\"}\n        </button>\n\n      </div>\n\n      {analyserState.input &&\n        <AudioAnalyser \n            input={analyserState.input} \n            mode={analyserState.mode} \n            visualiserType={visualiserType}\n        />}\n\n      <AudioPlayer tracks={tracks} onChangeTrack={onChangeTrack} onPauseTrack={onPauseTrack}></AudioPlayer>\n    </div>\n  );\n}\n\nexport default MediaPlayer;\n"]},"metadata":{},"sourceType":"module"}