{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\n\nconst AudioAnalyser = ({\n  audioContextSource,\n  audioContext\n}) => {\n  _s();\n\n  const [dataArray, setDataArray] = useState(new Uint8Array()); // const [audioData, setAudioData] = useState(new Uint8Array());\n\n  let analyser = audioContext.createAnalyser();\n  useEffect(() => {\n    // sets audio data to be a Uint8Array which is half as long as the analyser fftSize:\n    // determines the amount of data values available for visualisation\n    setDataArray(new Uint8Array(analyser.frequencyBinCount)); // connect the audio analyser to the source of audio\n\n    audioContextSource.connect(analyser); // set the request animation frame Id for use when app dismounts/cancels and calls \n    // tick\n    // requestAnimationFrame(tick);\n  }, []);\n\n  const tick = () => {\n    // copies wave form data into the dataArray which is passed in as an argument   \n    setDataArray(analyser.getByteTimeDomainData(dataArray));\n    console.log(\"audio data:\", dataArray); // set AudioData to be data contained in dataArray so it can be passed down to\n    // visualiser as a prop\n\n    requestAnimationFrame(tick);\n  }; // function componentWillUnmount() {\n  //     cancelAnimationFrame(rafId);\n  //     analyser.disconnect();\n  //     source.disconnect();\n  // }\n\n\n  return (// <AudioVisualiser audioData={dataArray}/>\n    null\n  );\n};\n\n_s(AudioAnalyser, \"FNVnWE0tS9kwAMVbBKh0b0IsmCM=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","audioContextSource","audioContext","dataArray","setDataArray","Uint8Array","analyser","createAnalyser","frequencyBinCount","connect","tick","getByteTimeDomainData","console","log","requestAnimationFrame"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,CAAD,KAA0C;AAAA;;AAE5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAIO,UAAJ,EAAD,CAA1C,CAF4D,CAG5D;;AAEA,MAAIC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AAGAV,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACAO,IAAAA,YAAY,CAAC,IAAIC,UAAJ,CAAeC,QAAQ,CAACE,iBAAxB,CAAD,CAAZ,CAHa,CAIb;;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BH,QAA3B,EALa,CAMb;AACA;AACA;AAEH,GAVQ,EAUN,EAVM,CAAT;;AAaA,QAAMI,IAAI,GAAG,MAAM;AACf;AACAN,IAAAA,YAAY,CAACE,QAAQ,CAACK,qBAAT,CAA+BR,SAA/B,CAAD,CAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BV,SAA1B,EAHe,CAIf;AACA;;AACAW,IAAAA,qBAAqB,CAACJ,IAAD,CAArB;AACH,GAPD,CArB4D,CA+B5D;AACA;AACA;AACA;AACA;;;AAEA,SACI;AACA;AAFJ;AAKH,CA1CD;;GAAMV,a;;KAAAA,a;AA4CN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audioContextSource, audioContext }) => {\n\n    const [dataArray, setDataArray] = useState(new Uint8Array());\n    // const [audioData, setAudioData] = useState(new Uint8Array());\n\n    let analyser = audioContext.createAnalyser();\n    \n    \n    useEffect( () => {\n        // sets audio data to be a Uint8Array which is half as long as the analyser fftSize:\n        // determines the amount of data values available for visualisation\n        setDataArray(new Uint8Array(analyser.frequencyBinCount)) ;\n        // connect the audio analyser to the source of audio\n        audioContextSource.connect(analyser);\n        // set the request animation frame Id for use when app dismounts/cancels and calls \n        // tick\n        // requestAnimationFrame(tick);\n\n    }, [])\n\n    \n    const tick = () => {\n        // copies wave form data into the dataArray which is passed in as an argument   \n        setDataArray(analyser.getByteTimeDomainData(dataArray));\n        console.log(\"audio data:\",dataArray)\n        // set AudioData to be data contained in dataArray so it can be passed down to\n        // visualiser as a prop\n        requestAnimationFrame(tick);\n    }\n\n\n    // function componentWillUnmount() {\n    //     cancelAnimationFrame(rafId);\n    //     analyser.disconnect();\n    //     source.disconnect();\n    // }\n\n    return(\n        // <AudioVisualiser audioData={dataArray}/>\n        null\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}