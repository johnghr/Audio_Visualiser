{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  source\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\n  useEffect(() => {\n    // empty request animation frame Id\n    let rafId; // creates an audio context\n\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)(); // creates analyser node\n\n    const analyser = audioContext.createAnalyser(); // Creates a data Array which is half the length of the fftSize\n    // it takes in unsigned integers  \n\n    const dataArray = new Uint8Array(analyser.frequencyBinCount); // connects the audio stream to the analyser node\n\n    source.connect(analyser);\n    const source = audioContext.createMediaElementSource(trackInput); // connects the audio stream to the analyser node\n\n    console.log(\"source = \", source);\n    source.connect(analyser).connect(audioContext.destination);\n\n    const tick = () => {\n      // copies wave form data into the dataArray which is passed in as an argument   \n      analyser.getByteTimeDomainData(dataArray); // sets audioData to be the value of a copy of dataArray\n\n      console.log(\"audio data:\", dataArray);\n      setAudioData([...dataArray]); // requests a re-render while calling tick in a recursive loop\n\n      rafId = requestAnimationFrame(tick);\n    };\n\n    rafId = requestAnimationFrame(tick);\n    return function cleanup() {\n      cancelAnimationFrame(rafId);\n    };\n  }, [source]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(WaveformVisualiser, {\n      audioData: audioData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"vp759RvJ0/M2OESOZvwirEnYLkY=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/AudioAnalyser.js"],"names":["React","useEffect","useState","WaveformVisualiser","AudioAnalyser","source","audioData","setAudioData","Uint8Array","rafId","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","connect","createMediaElementSource","trackInput","console","log","destination","tick","getByteTimeDomainData","requestAnimationFrame","cleanup","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AAAA;;AAElC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,CAAe,CAAf,CAAD,CAA1C;AAGAP,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,QAAIQ,KAAJ,CAFa,CAIb;;AACA,UAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAArB,CALa,CAMb;;AACA,UAAMC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAjB,CAPa,CAQb;AACA;;AACA,UAAMC,SAAS,GAAG,IAAIR,UAAJ,CAAeM,QAAQ,CAACG,iBAAxB,CAAlB,CAVa,CAWb;;AACAZ,IAAAA,MAAM,CAACa,OAAP,CAAeJ,QAAf;AACA,UAAMT,MAAM,GAAGK,YAAY,CAACS,wBAAb,CAAsCC,UAAtC,CAAf,CAba,CAcb;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBjB,MAAzB;AACAA,IAAAA,MAAM,CAACa,OAAP,CAAeJ,QAAf,EAAyBI,OAAzB,CAAiCR,YAAY,CAACa,WAA9C;;AAEA,UAAMC,IAAI,GAAG,MAAM;AACf;AACAV,MAAAA,QAAQ,CAACW,qBAAT,CAA+BT,SAA/B,EAFe,CAGf;;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BN,SAA1B;AACAT,MAAAA,YAAY,CAAC,CAAC,GAAGS,SAAJ,CAAD,CAAZ,CALe,CAMf;;AACAP,MAAAA,KAAK,GAAGiB,qBAAqB,CAACF,IAAD,CAA7B;AACH,KARD;;AAUAf,IAAAA,KAAK,GAAGiB,qBAAqB,CAACF,IAAD,CAA7B;AAEA,WAAO,SAASG,OAAT,GAAmB;AACtBC,MAAAA,oBAAoB,CAACnB,KAAD,CAApB;AACH,KAFD;AAIH,GAlCQ,EAkCN,CAACJ,MAAD,CAlCM,CAAT;AAoCA,sBACI;AAAA,2BACI,QAAC,kBAAD;AAAoB,MAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjDD;;GAAMF,a;;KAAAA,a;AAmDN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\n\nconst AudioAnalyser = ({ source }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0));\n    \n\n    useEffect( () => {\n        // empty request animation frame Id\n        let rafId; \n        \n        // creates an audio context\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        // creates analyser node\n        const analyser = audioContext.createAnalyser();\n        // Creates a data Array which is half the length of the fftSize\n        // it takes in unsigned integers  \n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // connects the audio stream to the analyser node\n        source.connect(analyser)\n        const source = audioContext.createMediaElementSource(trackInput)\n        // connects the audio stream to the analyser node\n        console.log(\"source = \", source)\n        source.connect(analyser).connect(audioContext.destination)\n        \n        const tick = () => {\n            // copies wave form data into the dataArray which is passed in as an argument   \n            analyser.getByteTimeDomainData(dataArray)\n            // sets audioData to be the value of a copy of dataArray\n            console.log(\"audio data:\",dataArray)\n            setAudioData([...dataArray])\n            // requests a re-render while calling tick in a recursive loop\n            rafId = requestAnimationFrame(tick);\n        }\n    \n        rafId = requestAnimationFrame(tick);\n\n        return function cleanup() {\n            cancelAnimationFrame(rafId);\n        }\n\n    }, [source])\n\n    return(\n        <div>\n            <WaveformVisualiser audioData={audioData}/>\n            {/* <FrequencyVisualiser audioData={audioData} analyser={analyser}/>  */}\n        </div>\n        \n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}