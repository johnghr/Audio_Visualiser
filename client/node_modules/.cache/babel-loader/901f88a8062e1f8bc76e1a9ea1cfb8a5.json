{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audioInput\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\n  useEffect(() => {\n    // \n    let rafId; // creates an audio context\n\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)(); // creates analyser node\n\n    const analyser = audioContext.createAnalyser();\n    const dataArray = new Uint8Array(analyser.frequencyBinCount); // creates a source variable containing the media stream source\n\n    const source = audioContext.createMediaStreamSource(audioInput); // connects the audio stream to the analyser node\n\n    source.connect(analyser);\n\n    const tick = () => {\n      // copies wave form data into the dataArray which is passed in as an argument   \n      analyser.getByteTimeDomainData(dataArray); // sets audioData to be the value of a copy of dataArray\n\n      console.log(\"audio data:\", dataArray);\n      setAudioData([...dataArray]); // requests a re-render while calling tick in a recursive loop\n\n      rafId = requestAnimationFrame(tick);\n    };\n\n    rafId = requestAnimationFrame(tick);\n    return function cleanup() {\n      cancelAnimationFrame(rafId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"vp759RvJ0/M2OESOZvwirEnYLkY=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","audioInput","audioData","setAudioData","Uint8Array","rafId","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","source","createMediaStreamSource","connect","tick","getByteTimeDomainData","console","log","requestAnimationFrame","cleanup","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGC,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AAAA;;AAEvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,CAAe,CAAf,CAAD,CAA1C;AAKAP,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,QAAIQ,KAAJ,CAFa,CAGb;;AACA,UAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAArB,CAJa,CAKb;;AACA,UAAMC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAjB;AACA,UAAMC,SAAS,GAAG,IAAIR,UAAJ,CAAeM,QAAQ,CAACG,iBAAxB,CAAlB,CAPa,CASb;;AACA,UAAMC,MAAM,GAAGR,YAAY,CAACS,uBAAb,CAAqCd,UAArC,CAAf,CAVa,CAWb;;AACAa,IAAAA,MAAM,CAACE,OAAP,CAAeN,QAAf;;AACA,UAAMO,IAAI,GAAG,MAAM;AACf;AACAP,MAAAA,QAAQ,CAACQ,qBAAT,CAA+BN,SAA/B,EAFe,CAGf;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BR,SAA1B;AACAT,MAAAA,YAAY,CAAC,CAAC,GAAGS,SAAJ,CAAD,CAAZ,CALe,CAMf;;AACAP,MAAAA,KAAK,GAAGgB,qBAAqB,CAACJ,IAAD,CAA7B;AACH,KARD;;AAUAZ,IAAAA,KAAK,GAAGgB,qBAAqB,CAACJ,IAAD,CAA7B;AAIA,WAAO,SAASK,OAAT,GAAmB;AACtBC,MAAAA,oBAAoB,CAAClB,KAAD,CAApB;AACH,KAFD;AAIH,GA/BQ,EA+BN,EA/BM,CAAT;AAiCA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEH;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CA5CA;;GAAMF,a;;KAAAA,a;AA8CP,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\n const AudioAnalyser = ({ audioInput }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0))\n    \n    \n    \n    \n    useEffect( () => {\n        // \n        let rafId;\n        // creates an audio context\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)()\n        // creates analyser node\n        const analyser = audioContext.createAnalyser();\n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        \n        // creates a source variable containing the media stream source\n        const source = audioContext.createMediaStreamSource(audioInput)\n        // connects the audio stream to the analyser node\n        source.connect(analyser)\n        const tick = () => {\n            // copies wave form data into the dataArray which is passed in as an argument   \n            analyser.getByteTimeDomainData(dataArray)\n            // sets audioData to be the value of a copy of dataArray\n            console.log(\"audio data:\",dataArray)\n            setAudioData([...dataArray])\n            // requests a re-render while calling tick in a recursive loop\n            rafId = requestAnimationFrame(tick);\n        }\n    \n        rafId = requestAnimationFrame(tick);\n\n        \n\n        return function cleanup() {\n            cancelAnimationFrame(rafId);\n        }\n\n    }, [])\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}