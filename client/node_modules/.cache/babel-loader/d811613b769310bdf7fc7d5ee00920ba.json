{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audioContextSource,\n  audioContext\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array());\n  let analyser = audioContext.createAnalyser();\n  useEffect(() => {\n    // sets audio data to be a Uint8Array which is half as long as the analyser fftSize:\n    // determines the amount of data values available for visualisation\n    setAudioData(new Uint8Array(analyser.frequencyBinCount)); // connect the audio analyser to the source of audio\n\n    audioContextSource.connect(analyser); // set the request animation frame Id for use when app dismounts/cancels\n\n    rafId = requestAnimationFrame(tick);\n  }, []);\n\n  let tick = () => {\n    // copies wava form data into audioData array   \n    analyser.getByteTimeDomainData(audioData); // console.log(audioData)\n\n    setAudioData(audioData);\n    rafId = requestAnimationFrame(tick);\n  }; // function componentWillUnmount() {\n  //     cancelAnimationFrame(rafId);\n  //     analyser.disconnect();\n  //     source.disconnect();\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"A9mH2REwVuk5Zr5YivScdT+42Ug=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useEffect","useState","AudioVisualiser","AudioAnalyser","audioContextSource","audioContext","audioData","setAudioData","Uint8Array","analyser","createAnalyser","frequencyBinCount","connect","rafId","requestAnimationFrame","tick","getByteTimeDomainData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,CAAD,KAA0C;AAAA;;AAE5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAIO,UAAJ,EAAD,CAA1C;AAEA,MAAIC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AAGAV,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACAO,IAAAA,YAAY,CAAC,IAAIC,UAAJ,CAAeC,QAAQ,CAACE,iBAAxB,CAAD,CAAZ,CAHa,CAIb;;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BH,QAA3B,EALa,CAMb;;AACAI,IAAAA,KAAK,GAAGC,qBAAqB,CAACC,IAAD,CAA7B;AACH,GARQ,EAQN,EARM,CAAT;;AAWA,MAAIA,IAAI,GAAG,MAAM;AACb;AACAN,IAAAA,QAAQ,CAACO,qBAAT,CAA+BV,SAA/B,EAFa,CAGb;;AACAC,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAO,IAAAA,KAAK,GAAGC,qBAAqB,CAACC,IAAD,CAA7B;AACH,GAND,CAlB4D,CA2B5D;AACA;AACA;AACA;AACA;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAET;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CArCD;;GAAMH,a;;KAAAA,a;AAuCN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audioContextSource, audioContext }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array());\n\n    let analyser = audioContext.createAnalyser();\n    \n    \n    useEffect( () => {\n        // sets audio data to be a Uint8Array which is half as long as the analyser fftSize:\n        // determines the amount of data values available for visualisation\n        setAudioData(new Uint8Array(analyser.frequencyBinCount)) ;\n        // connect the audio analyser to the source of audio\n        audioContextSource.connect(analyser);\n        // set the request animation frame Id for use when app dismounts/cancels\n        rafId = requestAnimationFrame(tick);\n    }, [])\n\n    \n    let tick = () => {\n        // copies wava form data into audioData array   \n        analyser.getByteTimeDomainData(audioData);\n        // console.log(audioData)\n        setAudioData(audioData)\n        rafId = requestAnimationFrame(tick);\n    }\n\n\n    // function componentWillUnmount() {\n    //     cancelAnimationFrame(rafId);\n    //     analyser.disconnect();\n    //     source.disconnect();\n    // }\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}