{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  audio\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array());\n  let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  let analyser = audioContext.createAnalyser();\n  let dataArray;\n  let source;\n  let rafId;\n\n  function componentDidMount() {\n    console.log('mount me daddy');\n    dataArray = new Uint8Array(analyser.frequencyBinCount);\n    source = audioContext.createMediaStreamSource(audio);\n    source.connect(analyser);\n    rafId = requestAnimationFrame(tick);\n    console.log(\"function has been called\");\n  }\n\n  function tick() {\n    console.log('tick tick muthafucka');\n    analyser.getByteTimeDomainData(dataArray);\n    setAudioData(dataArray);\n    rafId = requestAnimationFrame(tick);\n  }\n\n  function componentWillUnmount() {\n    cancelAnimationFrame(rafId);\n    analyser.disconnect();\n    source.disconnect();\n  } // componentWillUnmount()\n\n\n  return /*#__PURE__*/_jsxDEV(AudioVisualiser, {\n    audioData: audioData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"w4fguoQXwhq2SkrPe28xd8W6UxM=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/AudioAnalyser.js"],"names":["React","useState","AudioVisualiser","AudioAnalyser","audio","audioData","setAudioData","Uint8Array","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","source","rafId","componentDidMount","console","log","frequencyBinCount","createMediaStreamSource","connect","requestAnimationFrame","tick","getByteTimeDomainData","componentWillUnmount","cancelAnimationFrame","disconnect"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAGA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAEjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,IAAIM,UAAJ,EAAD,CAA1C;AAEA,MAAIC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAAnB;AACA,MAAIC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAf;AACA,MAAIC,SAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAJ;;AAIA,WAASC,iBAAT,GAA6B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAL,IAAAA,SAAS,GAAG,IAAIP,UAAJ,CAAeK,QAAQ,CAACQ,iBAAxB,CAAZ;AACAL,IAAAA,MAAM,GAAGP,YAAY,CAACa,uBAAb,CAAqCjB,KAArC,CAAT;AACAW,IAAAA,MAAM,CAACO,OAAP,CAAeV,QAAf;AACAI,IAAAA,KAAK,GAAGO,qBAAqB,CAACC,IAAD,CAA7B;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AAED,WAASK,IAAT,GAAe;AACXN,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAP,IAAAA,QAAQ,CAACa,qBAAT,CAA+BX,SAA/B;AACAR,IAAAA,YAAY,CAACQ,SAAD,CAAZ;AACAE,IAAAA,KAAK,GAAGO,qBAAqB,CAACC,IAAD,CAA7B;AACH;;AAGD,WAASE,oBAAT,GAAgC;AAC5BC,IAAAA,oBAAoB,CAACX,KAAD,CAApB;AACAJ,IAAAA,QAAQ,CAACgB,UAAT;AACAb,IAAAA,MAAM,CAACa,UAAP;AACH,GAjCgC,CAmCjC;;;AAEA,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEvB;AAA5B;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAzCD;;GAAMF,a;;KAAAA,a;AA2CN,eAAeA,aAAf","sourcesContent":["import React, {useState} from 'react'\nimport AudioVisualiser from './AudioVisualiser'\n\n\nconst AudioAnalyser = ({ audio }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array());\n\n    let audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    let analyser = audioContext.createAnalyser();\n    let dataArray;\n    let source;\n    let rafId;\n    \n    \n\n    function componentDidMount() {\n        console.log('mount me daddy');\n        dataArray = new Uint8Array(analyser.frequencyBinCount) ;\n        source = audioContext.createMediaStreamSource(audio);\n        source.connect(analyser);\n        rafId = requestAnimationFrame(tick);\n        console.log(\"function has been called\")\n    }\n    \n    function tick(){\n        console.log('tick tick muthafucka');\n        analyser.getByteTimeDomainData(dataArray);\n        setAudioData(dataArray)\n        rafId = requestAnimationFrame(tick);\n    }\n\n\n    function componentWillUnmount() {\n        cancelAnimationFrame(rafId);\n        analyser.disconnect();\n        source.disconnect();\n    }\n\n    // componentWillUnmount()\n\n    return(\n        <AudioVisualiser audioData={audioData}/>\n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}