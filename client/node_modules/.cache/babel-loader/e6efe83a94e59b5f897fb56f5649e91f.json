{"ast":null,"code":"var _jsxFileName = \"/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/AudioAnalyser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport FrequencyVisualiser from '../Visualisers/FrequencyVisualiser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioAnalyser = ({\n  mode,\n  input\n}) => {\n  _s();\n\n  const [audioData, setAudioData] = useState(new Uint8Array(0));\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)(); // creates analyser node\n\n  const analyser = audioContext.createAnalyser();\n  useEffect(() => {\n    // empty request animation frame Id\n    let rafId; // creates an audio context\n    // Creates a data Array which is half the length of the fftSize;\n    // it takes in unsigned integers  \n\n    const dataArray = new Uint8Array(analyser.frequencyBinCount); // connects the audio stream to the analyser node\n\n    let source;\n\n    if (mode === \"track\") {\n      source = audioContext.createMediaElementSource(input);\n      source.connect(analyser).connect(audioContext.destination);\n    } else {\n      source = audioContext.createMediaStreamSource(input);\n      source.connect(analyser);\n    }\n\n    if (mode === \"off\") {\n      source.disconnect(audioContext.destination);\n    }\n\n    const tick = () => {\n      // copies wave form data into the dataArray which is passed in as an argument   \n      analyser.getByteTimeDomainData(dataArray); // sets audioData to be the value of a copy of dataArray\n      // console.log(\"audio data:\",dataArray)\n\n      setAudioData([...dataArray]); // requests a re-render while calling tick in a recursive loop\n\n      rafId = requestAnimationFrame(tick);\n    };\n\n    rafId = requestAnimationFrame(tick);\n    return function cleanup() {\n      cancelAnimationFrame(rafId);\n    };\n  }, [mode, input]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(WaveformVisualiser, {\n      audioData: audioData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioAnalyser, \"vp759RvJ0/M2OESOZvwirEnYLkY=\");\n\n_c = AudioAnalyser;\nexport default AudioAnalyser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioAnalyser\");","map":{"version":3,"sources":["/Users/john/codeclan_work/final_project/full_stack_audio_processing_with_functions/audio_processing/src/components/Analysers/AudioAnalyser.js"],"names":["React","useEffect","useState","WaveformVisualiser","FrequencyVisualiser","AudioAnalyser","mode","input","audioData","setAudioData","Uint8Array","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","rafId","dataArray","frequencyBinCount","source","createMediaElementSource","connect","destination","createMediaStreamSource","disconnect","tick","getByteTimeDomainData","requestAnimationFrame","cleanup","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqB;AAAA;;AAEvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAIQ,UAAJ,CAAe,CAAf,CAAD,CAA1C;AAEI,QAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACE,kBAAnC,GAArB,CAJmC,CAKnC;;AACA,QAAMC,QAAQ,GAAGJ,YAAY,CAACK,cAAb,EAAjB;AAEJf,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,QAAIgB,KAAJ,CAFa,CAIb;AAEA;AACA;;AACA,UAAMC,SAAS,GAAG,IAAIR,UAAJ,CAAeK,QAAQ,CAACI,iBAAxB,CAAlB,CARa,CASb;;AACA,QAAIC,MAAJ;;AACA,QAAGd,IAAI,KAAK,OAAZ,EAAoB;AAChBc,MAAAA,MAAM,GAAGT,YAAY,CAACU,wBAAb,CAAsCd,KAAtC,CAAT;AACAa,MAAAA,MAAM,CAACE,OAAP,CAAeP,QAAf,EAAyBO,OAAzB,CAAiCX,YAAY,CAACY,WAA9C;AACH,KAHD,MAGO;AACHH,MAAAA,MAAM,GAAGT,YAAY,CAACa,uBAAb,CAAqCjB,KAArC,CAAT;AACAa,MAAAA,MAAM,CAACE,OAAP,CAAeP,QAAf;AACH;;AAED,QAAGT,IAAI,KAAK,KAAZ,EAAkB;AACdc,MAAAA,MAAM,CAACK,UAAP,CAAkBd,YAAY,CAACY,WAA/B;AACH;;AAED,UAAMG,IAAI,GAAG,MAAM;AACf;AACAX,MAAAA,QAAQ,CAACY,qBAAT,CAA+BT,SAA/B,EAFe,CAGf;AACA;;AACAT,MAAAA,YAAY,CAAC,CAAC,GAAGS,SAAJ,CAAD,CAAZ,CALe,CAMf;;AACAD,MAAAA,KAAK,GAAGW,qBAAqB,CAACF,IAAD,CAA7B;AACH,KARD;;AAUAT,IAAAA,KAAK,GAAGW,qBAAqB,CAACF,IAAD,CAA7B;AAEA,WAAO,SAASG,OAAT,GAAmB;AACtBC,MAAAA,oBAAoB,CAACb,KAAD,CAApB;AACH,KAFD;AAIH,GAvCQ,EAuCN,CAACX,IAAD,EAAOC,KAAP,CAvCM,CAAT;AAyCA,sBACI;AAAA,2BACI,QAAC,kBAAD;AAAoB,MAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAzDD;;GAAMH,a;;KAAAA,a;AA2DN,eAAeA,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport WaveformVisualiser from '../Visualisers/WaveformVisualiser';\nimport FrequencyVisualiser from '../Visualisers/FrequencyVisualiser';\n\nconst AudioAnalyser = ({ mode, input }) => {\n\n    const [audioData, setAudioData] = useState(new Uint8Array(0));\n        \n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        // creates analyser node\n        const analyser = audioContext.createAnalyser();\n\n    useEffect( () => {\n        // empty request animation frame Id\n        let rafId; \n        \n        // creates an audio context\n        \n        // Creates a data Array which is half the length of the fftSize;\n        // it takes in unsigned integers  \n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        // connects the audio stream to the analyser node\n        let source;\n        if(mode === \"track\"){\n            source = audioContext.createMediaElementSource(input);\n            source.connect(analyser).connect(audioContext.destination);\n        } else {\n            source = audioContext.createMediaStreamSource(input);\n            source.connect(analyser);\n        }\n\n        if(mode === \"off\"){\n            source.disconnect(audioContext.destination)\n        }\n        \n        const tick = () => {\n            // copies wave form data into the dataArray which is passed in as an argument   \n            analyser.getByteTimeDomainData(dataArray)\n            // sets audioData to be the value of a copy of dataArray\n            // console.log(\"audio data:\",dataArray)\n            setAudioData([...dataArray])\n            // requests a re-render while calling tick in a recursive loop\n            rafId = requestAnimationFrame(tick);\n        }\n    \n        rafId = requestAnimationFrame(tick);\n\n        return function cleanup() {\n            cancelAnimationFrame(rafId);\n        }\n\n    }, [mode, input])\n\n    return(\n        <div>\n            <WaveformVisualiser audioData={audioData}/>\n            {/* <FrequencyVisualiser audioData={audioData} analyser={analyser}/>  */}\n        </div>\n        \n    )\n\n}\n\nexport default AudioAnalyser;"]},"metadata":{},"sourceType":"module"}